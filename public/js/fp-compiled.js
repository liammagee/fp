"use strict";require.config({baseUrl:"../js",paths:{jquery:"utils/jquery"},shim:{jquery:{exports:"$"},"utils/underscore":{exports:"_"},"utils/jstat.min":{exports:"jStat"},"utils/jsts":["utils/javascript.util"],"ux/dat.gui":{exports:"dat.gui"},"ux/smoothie":{exports:"SmoothieChart"},"ux/stats.min":{exports:"Stats"},"three":{exports:"THREE"},"objects/Mirror":["three"],"objects/water-material":{exports:"THREE.Water",deps:["three","objects/Mirror"]},"loaders/TerrainLoader":{deps:["three"]},"controls/TrackballControls":{deps:["three"]},"controls/OrbitControls":{deps:["three"]},"controls/PointerLockControls":{deps:["three"]}}});define(["jquery","three","utils/underscore","utils/astar","utils/jstat.min","utils/jsts","ux/dat.gui","ux/smoothie","ux/stats.min","loaders/TerrainLoader","objects/Mirror","objects/water-material","controls/THREEx.KeyboardState","controls/TrackballControls","controls/OrbitControls","controls/PointerLockControls"],function($,THREE,_,astar){$.urlParam = function(name){var results=new RegExp("[ \\?& ]" + name + "=( [ ^&# ]* )").exec(window.location.href);if(results === null)return undefined;else return results[1] || 0;};$.sign = function(x){return typeof x === "number"?x?x < 0?-1:1:x === x?0:NaN:NaN;};var FiercePlanet=function FiercePlanet(){var fp=this;this.container = null;this.scene = null;this.appConfig = null;this.camera = null;this.renderer = null;this.clock = new THREE.Clock();this.mouse = {x:0,y:0,z:1};this.mouseVector = new THREE.Vector3();this.keyboard = new THREEx.KeyboardState();this.stats = null;this.terrain = null;this.controls = null;this.gui = null;this.chart = null;this.ray = new THREE.Raycaster(new THREE.Vector3(0,0,0),new THREE.Vector3(0,0,0));this.skyBox = null;this.waterMesh = null;this.water = null;this.agentNetwork = null;this.pathNetwork = null;this.trailNetwork = null;this.cursor = null;this.sim = null;this.lightHemisphere = null;this.lightDirectional = null;this.AgentNetwork = function(){this.AgentNetworkNetwork = function(color){this.links = [];this.networkColor = color;this.networkMesh = null;this.AgentNetworkNetworkLink = function(agent1,agent2){this.agent1 = agent1;this.agent2 = agent2;};this.generateFriendNetworkVertices = function(){var vertices=[];for(var i=0;i < this.links.length;i++) {var link=this.links[i];var agent1=link.agent1,agent2=link.agent2;var p1=fp.terrain.transformPointFromPlaneToSphere(agent1.position.clone(),fp.terrain.wrappedPercent),p2=fp.terrain.transformPointFromPlaneToSphere(agent2.position.clone(),fp.terrain.wrappedPercent);p1.y += fp.appConfig.agentOptions.size / 8;p2.y += fp.appConfig.agentOptions.size / 8;vertices.push(p2);vertices.push(p1);}return vertices;};this.friendNetworkGeometryCurved = function(vertices){var networkGeometry=new THREE.Geometry();var len=vertices.length;var spline=new THREE.Spline(vertices);var n_sub=fp.appConfig.displayOptions.networkCurvePoints;var position,index;for(var i=0;i < len * n_sub;i++) {index = i / (len * n_sub);position = spline.getPoint(index);networkGeometry.vertices[i] = new THREE.Vector3(position.x,position.y,position.z);}return networkGeometry;};this.friendNetworkGeometry = function(vertices){if(!fp.appConfig.displayOptions.networkCurve){var networkGeometry=new THREE.Geometry();networkGeometry.vertices = vertices;return networkGeometry;}else return this.friendNetworkGeometryCurved(vertices);};this.friendNetworkMaterial = function(){return new THREE.LineBasicMaterial({color:this.networkColor || fp.appConfig.colorOptions.colorNightNetwork,linewidth:1,opacity:1.0,blending:THREE.NormalBlending,transparent:false});};this.renderFriendNetwork = function(){if(!fp.AppState.runSimulation || !fp.appConfig.displayOptions.networkShow)return;if(!_.isUndefined(this.networkMesh))fp.scene.remove(this.networkMesh);if(fp.appConfig.displayOptions.networkCurve){this.networkMesh = new THREE.Line(this.friendNetworkGeometry(this.generateFriendNetworkVertices()),this.friendNetworkMaterial());}else {this.networkMesh = new THREE.Line(this.friendNetworkGeometry(this.generateFriendNetworkVertices()),this.friendNetworkMaterial(),THREE.LineSegments);}fp.scene.add(this.networkMesh);};this.establishLink = function(agent1,agent2){var chance=Math.pow(fp.appConfig.agentOptions.chanceToJoinNetwork,2);var chanceWithHome=Math.pow(fp.appConfig.agentOptions.chanceToJoinNetworkWithHome,2);var chanceWithBothHomes=Math.pow(fp.appConfig.agentOptions.chanceToJoinNetworkWithBothHomes,2);if(Math.random() < chance){var link1=new this.AgentNetworkNetworkLink(agent1,agent2);var link2=new this.AgentNetworkNetworkLink(agent2,agent1);if(this.links.indexOf(link1) == -1 && this.links.indexOf(link2) == -1){this.links.push(link1);}}if(Math.random() < chanceWithHome && (agent1.home != null || agent2.home != null)){var link1=new this.AgentNetworkNetworkLink(agent1,agent2);var link2=new this.AgentNetworkNetworkLink(agent2,agent1);if(this.links.indexOf(link1) == -1 && this.links.indexOf(link2) == -1){this.links.push(link1);}}if(Math.random() < chanceWithBothHomes && agent1.home != null && agent2.home != null){var link1=new this.AgentNetworkNetworkLink(agent1,agent2);var link2=new this.AgentNetworkNetworkLink(agent2,agent1);if(this.links.indexOf(link1) == -1 && this.links.indexOf(link2) == -1){this.links.push(link1);}}};this.enlistAgent = function(agent){var agents=fp.patchNetwork.patches[fp.getPatchIndex(agent.position.x,agent.position.z)];if(_.isUndefined(agents))return;if(agents.length <= 1)return;for(var i=0;i < agents.length;i++) {if(agents[i] == agent)continue;var otherAgent=agents[i];this.establishLink(agent,otherAgent);}};this.updateAgentNetworkRendering = function(){if(!fp.AppState.runSimulation)return;this.renderFriendNetwork();};};this.createInitialAgentPopulation = function(){for(var i=0;i < fp.appConfig.agentOptions.initialPopulation;i++) this.agents.push(this.createAgent());this.buildAgentParticleSystem();};this.createAgent = function(){var position=new THREE.Vector3();var point=this.randomPointForAgent();var x=point.x;var z=point.z;var y=fp.getHeight(x,z) + fp.appConfig.agentOptions.terrainOffset + fp.appConfig.agentOptions.size / 2;position.x = x;position.y = y;position.z = z;var agent=new fp.agentNetwork.agentClass();agent.setPosition(position);agent.setRandomDirection();agent.color = "#" + (fp.appConfig.displayOptions.dayShow?fp.appConfig.colorOptions.colorDayAgent.toString(16):fp.appConfig.colorOptions.colorNightAgent.toString(16));return agent;};this.counter = 0;this.randomPointForAgent = function(){var extent=fp.appConfig.terrainOptions.gridExtent;var initExtent=fp.appConfig.agentOptions.initialExtent / 100 * extent * fp.appConfig.terrainOptions.multiplier;var initX=fp.appConfig.agentOptions.initialX / 100 * extent - extent / 2;var initY=fp.appConfig.agentOptions.initialY / 100 * extent - extent / 2;var x=Math.floor((Math.random() - 0.5) * initExtent) + initX;var z=Math.floor((Math.random() - 0.5) * initExtent) + initY;var point=null;if(fp.appConfig.agentOptions.initialCircle){var normX=x - initX,normZ=z - initY;var radius=Math.sqrt(normX * normX + normZ * normZ);while(radius > initExtent / 2) {point = this.randomPointForAgent();x = point.x;z = point.z;normX = x - initX;normZ = z - initY;radius = Math.sqrt(normX * normX + normZ * normZ);}}var boundary=extent / 2 * fp.appConfig.terrainOptions.multiplier;while(x < -boundary || x > boundary || (z < -boundary || z > boundary)) {point = this.randomPointForAgent();x = point.x;z = point.z;}if(fp.appConfig.agentOptions.noWater){var y=fp.getHeight(x,z);while(y < 0) {point = this.randomPointForAgent();x = point.x;z = point.z;y = fp.getHeight(x,z);}}return {x:x,z:z};};this.updateAgentShader = function(){if(!_.isNull(this.agentParticleSystemAttributes) && typeof this.agentParticleSystemAttributes.color !== "undefined" && this.agentParticleSystemAttributes.color.value.length > 0){for(var i=0;i < this.agents.length;i++) {if(fp.appConfig.displayOptions.coloriseAgentsByHealth){var agent=this.agents[i];var health=this.agents[i].health;var r=0;var g=fp.appConfig.displayOptions.dayShow?0.0:1.0;var b=fp.appConfig.displayOptions.dayShow?1.0:0.0;g *= health / 100.0;b *= health / 100.0;r = (100 - health) / 100.0;var col=new THREE.Color(r,g,b);this.agentParticleSystemAttributes.alpha.value[i] = 0.75;this.agentParticleSystemAttributes.color.value[i] = new THREE.Color(col);}else {this.agentParticleSystemAttributes.alpha.value[i] = this.agents[i].health * 0.0075 + 0.025;this.agentParticleSystemAttributes.color.value[i] = new THREE.Color(this.agents[i].color);}}this.agentParticleSystemAttributes.color.needsUpdate = true;}};this.updateAgents = function(){if(!fp.AppState.runSimulation || _.isUndefined(this.particles))return;var agents=this.agents;if(fp.appConfig.agentOptions.shuffle)agents = _.shuffle(this.agents);for(var i=0;i < agents.length;i++) {var agent=agents[i];var timeToMove=Math.floor(i / this.agents.length * fp.timescale.framesToYear);var interval=fp.timescale.frameCounter % fp.timescale.framesToYear;if(timeToMove == interval){var underConstruction=agent.build() || agent.buildRoad();if(underConstruction)continue;agent.evaluateDirection();if(fp.appConfig.agentOptions.establishLinks){this.networks.forEach(function(network){network.enlistAgent(agent);});}var ai=fp.getIndex(this.agents[i].lastPosition.x,this.agents[i].lastPosition.z);if(ai > -1){fp.trailNetwork.trails[ai] = fp.trailNetwork.trails[ai]?fp.trailNetwork.trails[ai] + 1:1;}if(agent.grounded)agent.perturbDirection();agent.updateTick();}agent.move();}if(!_.isNull(this.particles)){for(var offset=0,i=0;i < agents.length;i++) {var agent=this.agents[i];var posVec=fp.terrain.transformPointFromPlaneToSphere(agent.position,fp.terrain.wrappedPercent);this.particles.geometry.vertices[i] = posVec;}this.particles.geometry.verticesNeedUpdate = true;}};this.updateAgentParticleSystem = function(){var agentGeometry=new THREE.Geometry();for(var offset=0,i=0;i < this.agents.length - 1;i++) {var agent=this.agents[i];var posVec=fp.terrain.transformPointFromPlaneToSphere(agent.position,fp.terrain.wrappedPercent);agentGeometry.vertices.push(posVec);};this.agentParticleSystemAttributes = {alpha:{type:"f",value:[]},color:{type:"c",value:[]}};for(var i=0;i < this.agents.length;i++) {this.agentParticleSystemAttributes.alpha.value[i] = fp.agentNetwork.agents[i].health * 0.0075 + 0.025;this.agentParticleSystemAttributes.color.value[i] = new THREE.Color(fp.agentNetwork.agents[i].color);}var agentShaderMaterial=fp.agentNetwork.particles.material;agentShaderMaterial.attributes = this.agentParticleSystemAttributes;fp.scene.remove(fp.agentNetwork.particles);this.particles = new THREE.PointCloud(agentGeometry,agentShaderMaterial);this.particles.dynamic = true;this.particles.sortParticles = true;fp.scene.add(this.particles);};this.buildAgentParticleSystem = function(){var agentGeometry=new THREE.Geometry();this.agents.forEach(function(agent){agentGeometry.vertices.push(fp.terrain.transformPointFromPlaneToSphere(agent.position,fp.terrain.wrappedPercent));});this.agentParticleSystemAttributes = {alpha:{type:"f",value:[]},color:{type:"c",value:[]}};var discTexture=( new THREE.TextureLoader() ).load("../images/sprites/stickman_180.png");if(!fp.appConfig.agentOptions.useStickman)discTexture = ( new THREE.TextureLoader() ).load("../images/sprites/disc.png");var agentParticleSystemUniforms={texture:{type:"t",value:discTexture},size:{type:"f",value:Math.floor(fp.appConfig.agentOptions.size)}};for(var i=0;i < agentGeometry.vertices.length;i++) {this.agentParticleSystemAttributes.alpha.value[i] = this.agents[i].health * 0.0075 + 0.025;this.agentParticleSystemAttributes.color.value[i] = new THREE.Color(this.agents[i].color);}var agentShaderMaterial=new THREE.ShaderMaterial({size:fp.appConfig.agentOptions.size,uniforms:agentParticleSystemUniforms,attributes:this.agentParticleSystemAttributes,vertexShader:fp.ShaderUtils.agentVertexShader(),fragmentShader:fp.ShaderUtils.agentFragmentShader(),sizeAttenuation:true,fog:false,blending:THREE.NormalBlending,transparent:true,alphaTest:0.5});fp.scene.remove(this.particles);this.particles = new THREE.PointCloud(agentGeometry,agentShaderMaterial);this.particles.dynamic = true;this.particles.sortParticles = true;};this.updateAgentNetwork = function(){this.updateAgents();this.networks.forEach(function(network){network.updateAgentNetworkRendering();});this.updateAgentShader();};this.agentClass = fp.Agent;this.agents = [];this.networks = [];this.networks.push(new this.AgentNetworkNetwork());this.particles = null;this.agentParticleSystemAttributes = null;};this.BUILDING_FORMS = {names:["rectangle","octagon","fivesided","triangle","concave"],rectangle:function rectangle(w,l,h){var p1=new THREE.Vector3(-w / 2,h,-l / 2);var p2=new THREE.Vector3(w / 2,h,-l / 2);var p3=new THREE.Vector3(w / 2,h,l / 2);var p4=new THREE.Vector3(-w / 2,h,l / 2);return [p1,p2,p3,p4];},octagon:function octagon(w,l,h){var p1=new THREE.Vector3(-w / 2,h,-l / 2);var p1_5=new THREE.Vector3(0,h,-l / 1.5);var p2=new THREE.Vector3(w / 2,h,-l / 2);var p2_5=new THREE.Vector3(w / 1.5,h,0);var p3=new THREE.Vector3(w / 2,h,l / 2);var p3_5=new THREE.Vector3(0,h,l / 1.5);var p4=new THREE.Vector3(-w / 2,h,l / 2);var p4_5=new THREE.Vector3(-w / 1.5,h,0);return [p1,p1_5,p2,p2_5,p3,p3_5,p4,p4_5];},fivesided:function fivesided(w,l,h){var p1=new THREE.Vector3(-w / 2,h,-l / 2);var p2=new THREE.Vector3(w / 2,h,-l / 2);var p3=new THREE.Vector3(w / 2,h,l / 2);var p4=new THREE.Vector3(-w / 2,h,l / 2);var p5=new THREE.Vector3(-w,h,0);return [p1,p2,p3,p4,p5];},triangle:function triangle(w,l,h){var p1=new THREE.Vector3(-w / 2,h,-l / 2);var p2=new THREE.Vector3(w / 2,h,-l / 2);var p3=new THREE.Vector3(0,h,l / 2);return [p1,p2,p3];},concave:function concave(w,l,h){var p1=new THREE.Vector3(-w / 2,h,-l / 2);var p1_1=new THREE.Vector3(-w / 4,h,-l / 2);var p1_2=new THREE.Vector3(-w / 4,h,l / 4);var p1_3=new THREE.Vector3(w / 4,h,l / 4);var p1_4=new THREE.Vector3(w / 4,h,-l / 2);var p2=new THREE.Vector3(w / 2,h,-l / 2);var p3=new THREE.Vector3(w / 2,h,l / 2);var p4=new THREE.Vector3(-w / 2,h,l / 2);return [p1,p1_1,p1_2,p1_3,p1_4,p2,p3,p4];}};this.BuildingNetwork = function(){this.networkMesh = null;this.networkJstsCache = [];this.buildings = [];this.buildingHash = {};this.speedOfConstruction = 0.05;this.buildingObject = new THREE.Object3D();this.proximityFunctions = function(){return [[fp.checkProximityOfBuildings,fp.appConfig.buildingOptions.otherBuildings],[fp.checkNearestNeighbour,fp.appConfig.buildingOptions.distanceFromOtherBuildingsMin,fp.appConfig.buildingOptions.distanceFromOtherBuildingsMax]];};this.generateRandomDimensions = function(){return {levels:fp.appConfig.buildingOptions.minHeight + Math.floor(Math.random() * (fp.appConfig.buildingOptions.maxHeight - fp.appConfig.buildingOptions.minHeight)),width:fp.appConfig.buildingOptions.minWidth + Math.floor(Math.random() * (fp.appConfig.buildingOptions.maxWidth - fp.appConfig.buildingOptions.minWidth)),length:fp.appConfig.buildingOptions.minLength + Math.floor(Math.random() * (fp.appConfig.buildingOptions.maxLength - fp.appConfig.buildingOptions.minLength))};};this.get2dPoints = function(building){var points=[];var firstFloor=building.highResMeshContainer.children[0],position=building.highResMeshContainer.position,vertices=firstFloor.geometry.vertices,ff0=vertices[0].clone().applyMatrix4(firstFloor.matrix).add(building.highResMeshContainer.position),ff1=vertices[1].clone().applyMatrix4(firstFloor.matrix).add(building.highResMeshContainer.position),ff2=vertices[2].clone().applyMatrix4(firstFloor.matrix).add(building.highResMeshContainer.position),ff3=vertices[3].clone().applyMatrix4(firstFloor.matrix).add(building.highResMeshContainer.position),wX=ff1.x - ff0.x,wZ=ff1.z - ff0.z,lX=ff3.x - ff0.x,lZ=ff3.z - ff0.z,wXa=Math.abs(wX) + 1,wZa=Math.abs(wZ) + 1,lXa=Math.abs(lX) + 1,lZa=Math.abs(lZ) + 1,wXi=Math.round(wX / wXa),wZi=Math.round(wZ / wZa),lXi=Math.round(lX / lXa),lZi=Math.round(lZ / lZa);var indexPrev=-1,offset=1;for(var i=0;i < wXa;i += offset) {for(var j=0;j < wZa;j += offset) {var wXLocal=ff0.x + i * wXi,wZLocal=ff0.z + j * wZi;for(var k=0;k < lXa;k += offset) {for(var l=0;l < lZa;l += offset) {var lXLocal=wXLocal + k * lXi,lZLocal=wZLocal + l * lZi;var coordinate={x:lXLocal,y:lZLocal};if(points.indexOf(coordinate) == -1){points.push(coordinate);}}}}}return points;};this.get2dIndexPoints = function(building){return _.map(this.get2dPoints(building),function(point){return fp.getIndex(point.x,point.y);});};this.get2dPointsForBoundingBox = function(building){var points=[];var firstFloor=building.mockMesh,position=building.highResMeshContainer.position,vertices=firstFloor.geometry.vertices,verticesOnBase=vertices.length;for(var i=0;i < verticesOnBase / 2;i++) {var point=vertices[i].clone().applyMatrix4(firstFloor.matrix);points.push({x:point.x,y:point.z});}return points;};this.createJstsGeomFromBoundingBox = function(building){var points=this.get2dPointsForBoundingBox(building);var coords=_.map(points,function(p){return new jsts.geom.Coordinate(p.x,p.y);});var lineUnion,j=coords.length - 1;for(var i=0;i < coords.length;i++) {var line=new jsts.geom.LineString([coords[i],coords[j]]);j = i;if(_.isUndefined(lineUnion))lineUnion = line;else lineUnion = lineUnion.union(line);}var polygonizer=new jsts.operation.polygonize.Polygonizer();polygonizer.add(lineUnion);var polygon=polygonizer.getPolygons().toArray()[0];return polygon.buffer(0);};this.collidesWithOtherBuildings = function(building){if(this.buildingHash[fp.getIndex(building.lod.position.x,building.lod.position.z)])return true;var buildingGeometry=this.createJstsGeomFromBoundingBox(building);for(var i=0;i < this.networkJstsCache.length;i++) {var b=this.networkJstsCache[i];if(b.intersects(buildingGeometry)){return true;}}return false;};this.collidesWithRoads = function(building){if(_.isNull(fp.roadNetwork.networkGeometry))return false;var buildingGeometry=this.createJstsGeomFromBoundingBox(building);return fp.roadNetwork.networkGeometry.crosses(buildingGeometry);};this.updateBuildings = function(){if(!fp.AppState.runSimulation || !fp.appConfig.displayOptions.buildingsShow)return;for(var i=0;i < fp.buildingNetwork.buildings.length;i++) {var building=fp.buildingNetwork.buildings[i];var likelihoodToGrow=Math.random();if(likelihoodToGrow > fp.likelihoodOfGrowth())building.updateBuilding();}};this.createBuilding = function(position,dimensions){var buildingForm=fp.appConfig.buildingOptions.buildingForm;if(fp.appConfig.buildingOptions.randomForm)buildingForm = fp.BUILDING_FORMS.names[Math.floor(Math.random() * fp.BUILDING_FORMS.names.length)];var rotateY=fp.appConfig.buildingOptions.rotateSetAngle / 180 * Math.PI;if(fp.appConfig.buildingOptions.rotateRandomly)rotateY = Math.random() * Math.PI;var rotation=new THREE.Vector3(0,rotateY,0);var building=new fp.Building(buildingForm,dimensions,position,rotation);if(fp.appConfig.buildingOptions.detectBuildingCollisions){if(fp.buildingNetwork.collidesWithOtherBuildings(building))return undefined;}if(fp.appConfig.buildingOptions.detectRoadCollisions){if(fp.buildingNetwork.collidesWithRoads(building))return undefined;}var percent=fp.terrain.wrappedPercent;if(percent > 0){var cv=_.clone(building.originPosition);var nv=fp.terrain.transformPointFromPlaneToSphere(cv,100);var v=fp.terrain.sphereOriginAngle(nv.x,nv.y,nv.z).multiplyScalar(percent / 100);v.y = rotateY;nv = fp.terrain.transformPointFromPlaneToSphere(cv,percent);building.mesh.rotation.set(-Math.PI / 2 + v.x,-v.z,v.y);building.mesh.position.set(nv.x,nv.y,nv.z);building.lod.rotation.set(v.x,v.y,v.z);building.lod.position.set(nv.x,nv.y,nv.z);building.highResMeshContainer.rotation.set(v.x,v.y,v.z);building.highResMeshContainer.position.set(nv.x,nv.y,nv.z);building.lowResMeshContainer.rotation.set(v.x,v.y,v.z);building.lowResMeshContainer.position.set(nv.x,nv.y,nv.z);}fp.buildingNetwork.buildings.push(building);var index=fp.getIndex(position.x,position.z);fp.buildingNetwork.buildingHash[index] = building;if(fp.appConfig.buildingOptions.detectBuildingCollisions || fp.appConfig.buildingOptions.detectRoadCollisions)fp.buildingNetwork.networkJstsCache.push(this.createJstsGeomFromBoundingBox(building));return building;};};this.RoadNetwork = function(){this.networkMesh = null;this.planeVertices = [];this.networkJstsCache = [];this.roads = {};this.indexValues = [];this.points = [];this.networkGeometry = null;this.intersections = [];this.getRoadTerrainPoints = function(p1,p2){var points=[];var xLast=p1.x,yLast=0,zLast=p1.z,lastChange=0;var xd=p2.x - xLast,zd=p2.z - zLast;var distance=Math.sqrt(xd * xd + zd * zd) / fp.appConfig.roadOptions.roadSegments,remaining=distance;var yOffset=fp.appConfig.terrainOptions.defaultHeight + 20;p1 = new THREE.Vector3(p1.x,fp.getHeight(p1.x,p1.z) + yOffset,p1.z);p2 = new THREE.Vector3(p2.x,fp.getHeight(p2.x,p2.z) + yOffset,p2.z);points.push(p1);for(var i=0;i < distance;i++) {var angle=Math.atan2(zd,xd),angleLeft=angle - Math.PI / 2,angleRight=angle + Math.PI / 2;var x0=xLast + xd * (1 / (remaining + 1)),z0=zLast + zd * (1 / (remaining + 1)),y0=fp.getHeight(x0,z0) + yOffset;var x=x0,y=y0,z=z0,k;for(var j=1;j <= fp.appConfig.roadOptions.roadDeviation;j++) {var xL=x0 + Math.cos(angleLeft) * j,zL=z0 + Math.sin(angleLeft) * j,yL=fp.getHeight(xL,zL) + yOffset;if(yL < y && yL > 0){x = xL;y = yL;z = zL;}}for(k = 1;k <= fp.appConfig.roadOptions.roadDeviation;k++) {var xR=x0 + Math.cos(angleRight) * k,zR=z0 + Math.sin(angleRight) * k,yR=fp.getHeight(xR,zR) + yOffset;if(yR < y && yR > 0){x = xR;y = yR;z = zR;}}if(x != x0 || y != y0 || z != z0){x = Math.round(x);y = Math.round(y);z = Math.round(z);var point=new THREE.Vector3(x,y,z);points.push(point);if(y != yLast){var yDiff=y - yLast;var shift=i - lastChange + 1;for(k = lastChange + 1;k < i;k++) {var change=yDiff * ((k - lastChange) / shift);point.y += change;}lastChange = i;}}xLast = x;yLast = y;zLast = z;remaining--;xd = p2.x - xLast;zd = p2.z - zLast;}points.push(p2);return points;};this.createJstsGeomFromRoadPoints = function(points){var coords=_.map(points,function(p){return new jsts.geom.Coordinate(p.x,p.y);});var lineUnion,j=coords.length - 1;for(var i=0;i < coords.length;i++) {var line=new jsts.geom.LineString([coords[i],coords[j]]);j = i;if(_.isUndefined(lineUnion))lineUnion = line;else lineUnion = lineUnion.union(line);}var polygonizer=new jsts.operation.polygonize.Polygonizer();polygonizer.add(lineUnion);var polygon=polygonizer.getPolygons().toArray()[0];return polygon.buffer(0);};this.addRoad = function(p1,p2,roadWidth){var points=this.getRoadTerrainPoints(p1,p2);var jstsCoords=_.map(points,function(p){return new jsts.geom.Coordinate(p.x,p.z);});var jstsGeom=new jsts.geom.LineString(jstsCoords);var overlap=fp.roadNetwork.countCollisions(jstsGeom);if(overlap > fp.appConfig.roadOptions.overlapThreshold)return false;var thisIndexValues=_.map(points,function(p){return fp.getIndex(p.x,p.z);});overlap = _.intersection(fp.roadNetwork.indexValues,thisIndexValues).length;if(overlap > fp.appConfig.roadOptions.overlapThreshold)return false;var extrudePath=new THREE.SplineCurve3(points);var roadColor=fp.appConfig.displayOptions.dayShow?fp.appConfig.colorOptions.colorDayRoad:fp.appConfig.colorOptions.colorNightRoad;var roadMaterial=new THREE.MeshLambertMaterial({color:roadColor});roadMaterial.side = THREE.DoubleSide;var roadGeom=new THREE.TubeGeometry(extrudePath,points.length,roadWidth,fp.appConfig.roadOptions.roadRadiusSegments,false);var adjust=fp.appConfig.roadOptions.flattenAdjustment,lift=fp.appConfig.roadOptions.flattenLift;var vertices=roadGeom.vertices;for(var i=0;i <= vertices.length - fp.appConfig.roadOptions.roadRadiusSegments;i += fp.appConfig.roadOptions.roadRadiusSegments) {var coil=vertices.slice(i,i + fp.appConfig.roadOptions.roadRadiusSegments);var mean=jStat.mean(_.map(coil,function(p){return p.y;}));for(var j=0;j < coil.length;j++) {var y=coil[j].y;var diff=y - mean;var newDiff=diff * adjust;vertices[i + j].y = lift + mean + newDiff;}}fp.roadNetwork.planeVertices.push(vertices);var percent=fp.terrain.wrappedPercent;if(percent > 0){var transformedVertices=[];for(var i=0;i < vertices.length;i++) {transformedVertices.push(fp.terrain.transformPointFromPlaneToSphere(vertices[i],percent));}roadGeom.vertices = transformedVertices;}var roadMesh=new THREE.Mesh(roadGeom,roadMaterial);fp.roadNetwork.networkMesh.add(roadMesh);thisIndexValues.forEach(function(p){fp.roadNetwork.roads[p] = roadMesh;});if(_.isNull(this.networkGeometry))this.networkGeometry = new jsts.geom.LineString(jstsCoords);else {try{this.networkGeometry = this.networkGeometry.union(jstsGeom);}catch(e) {console.log(e);}}fp.roadNetwork.indexValues = _.uniq(_.flatten(fp.roadNetwork.indexValues.push(thisIndexValues)));return true;};this.countCollisions = function(jstsGeom){if(_.isNull(fp.roadNetwork.networkGeometry))return 0;var intersections=fp.roadNetwork.networkGeometry.intersection(jstsGeom);if(!_.isUndefined(intersections.geometries))return intersections.geometries.length;else return 1;};this.cityBlocks = function(){var polygonizer=new jsts.operation.polygonize.Polygonizer();polygonizer.add(this.networkGeometry);return polygonizer.getPolygons().toArray();};this.getPolygonArea = function(polygon){var points=polygon.shell.points;var area=0;var j=points.length - 1;for(var i=0;i < points.length;i++) {area = area + (points[j].x + points[i].x) * (points[j].y - points[i].y);j = i;}return area / 2;};};this.Patch = function(val){this.value = val;this.initialValue = val;this.updatePatchValue = function(amount){var val=this.value;if(val + amount < 0.0001)val = 0.0001;else if(val + amount > 1.0)val = 1.0;else val += amount;this.value = val;};};this.PatchNetwork = function(func){this.plane = null;this.patches = {};this.patchValues = [];this.patchPlaneArray = [];this.patchSphereArray = [];this.patchMeanValue = 0;this.patchSize = fp.appConfig.terrainOptions.patchSize;this.initialisePatchFunction = !_.isUndefined(func)?func:function(){return Math.random();};this.initialisePatches = function(){var dim=Math.ceil(fp.terrain.gridPoints / fp.patchNetwork.patchSize) - 1;fp.patchNetwork.patchValues = new Array(dim * dim);for(var i=0;i < fp.patchNetwork.patchValues.length;i++) {fp.patchNetwork.patchValues[i] = new fp.Patch(this.initialisePatchFunction());}};this.cloneGeometry = function(){var clone=fp.terrain.plane.geometry.clone();var vertices=fp.terrain.plane.geometry.attributes.position.array;var dim=Math.ceil(fp.terrain.gridPoints / fp.patchNetwork.patchSize);var patchSize=fp.patchNetwork.patchSize;var size=fp.terrain.gridExtent * fp.appConfig.terrainOptions.multiplier;var newPoints=fp.terrain.gridPoints + dim;var geometry=new THREE.PlaneBufferGeometry(size,size,newPoints - 1,newPoints - 1);var patchSizeOffset=fp.patchNetwork.patchSize + 1;var newOffset=0,oldOffset=0;var counter=0;for(var i=0;i < fp.terrain.gridPoints;i++) {for(var j=0;j < fp.terrain.gridPoints;j++) {geometry.attributes.position.array[newOffset + 0] = vertices[oldOffset + 0];geometry.attributes.position.array[newOffset + 1] = vertices[oldOffset + 1];geometry.attributes.position.array[newOffset + 2] = vertices[oldOffset + 2];if(i % patchSize == 0){newOffset += newPoints * 3;geometry.attributes.position.array[newOffset + 0] = vertices[oldOffset + 0];geometry.attributes.position.array[newOffset + 1] = vertices[oldOffset + 1];geometry.attributes.position.array[newOffset + 2] = vertices[oldOffset + 2];if(j % patchSize == 0){newOffset += 3;geometry.attributes.position.array[newOffset + 0] = vertices[oldOffset + 0];geometry.attributes.position.array[newOffset + 1] = vertices[oldOffset + 1];geometry.attributes.position.array[newOffset + 2] = vertices[oldOffset + 2];newOffset -= 3;}newOffset -= newPoints * 3;}if(j % patchSize == 0){newOffset += 3;geometry.attributes.position.array[newOffset + 0] = vertices[oldOffset + 0];geometry.attributes.position.array[newOffset + 1] = vertices[oldOffset + 1];geometry.attributes.position.array[newOffset + 2] = vertices[oldOffset + 2];}newOffset += 3;oldOffset += 3;}if(i % patchSize == 0){newOffset += newPoints * 3;}}var len=geometry.attributes.position.array.length / 3,heights=new Float32Array(len),trailPoints=new Float32Array(len),patchPoints=new Float32Array(len);geometry.addAttribute("height",new THREE.BufferAttribute(heights,1));geometry.addAttribute("trail",new THREE.BufferAttribute(trailPoints,1));geometry.addAttribute("patch",new THREE.BufferAttribute(patchPoints,1));var patchAttributes={height:{type:"f",value:null},trail:{type:"f",value:null},patch:{type:"f",value:null}};for(i = 0;i < len;i++) {heights[i] = geometry.attributes.position.array[i * 3 + 2];trailPoints[i] = 0;patchPoints[i] = 0;}var richTerrainMaterial=new THREE.ShaderMaterial({uniforms:fp.ShaderUtils.lambertUniforms(fp.terrain.nightTerrainUniforms),attributes:patchAttributes,vertexShader:fp.ShaderUtils.lambertShaderVertex(fp.ShaderUtils.terrainVertexShaderParams(),fp.ShaderUtils.terrainVertexShaderMain()),fragmentShader:fp.ShaderUtils.lambertShaderFragment(fp.ShaderUtils.terrainFragmentShaderParams(),fp.ShaderUtils.terrainFragmentShaderMain()),lights:true,transparent:true});this.patchPlaneArray = geometry.attributes.position.clone();this.patchSphereArray = fp.terrain.constructSphere(this.patchPlaneArray);return new THREE.Mesh(geometry,richTerrainMaterial);};this.buildPatchMesh = function(){this.plane = this.cloneGeometry();this.plane.rotation.set(-Math.PI / 2,0,0);this.plane.position.set(0,fp.appConfig.terrainOptions.defaultHeight,0);this.plane.castShadow = true;this.plane.receiveShadow = true;this.updateTerrainPatchAttributes();this.togglePatchesState();};this.defaultReviseValues = function(){this.patchMeanValue = 0;var popPatch=fp.patchNetwork.patchValues.length;var popAgent=fp.agentNetwork.agents.length;var r=popAgent / popPatch;for(var i=0;i < this.patchValues.length;i++) {var patch=this.patchValues[i];if(!_.isUndefined(this.patches[i])){var len=this.patches[i].length;var change=-len * (1 / Math.pow(r,2));patch.updatePatchValue(change);}else {var change=Math.pow(r,2);patch.updatePatchValue(Math.pow(r,3));}this.patchMeanValue += patch.value;}this.patchMeanValue /= this.patchValues.length;};this.updatePatchAgents = function(){this.patches = {};for(var i=0;i < fp.agentNetwork.agents.length;i++) {var agent=fp.agentNetwork.agents[i];var index=fp.getPatchIndex(agent.position.x,agent.position.z);if(!this.patches[index])this.patches[index] = [];this.patches[index].push(agent);}};this.updatePatchValues = function(){if(fp.appConfig.displayOptions.patchesUpdate && fp.AppState.runSimulation){if(!_.isUndefined(fp.patchNetwork.reviseValues)){fp.patchNetwork.reviseValues();}else {fp.patchNetwork.defaultReviseValues();}}if(fp.appConfig.displayOptions.patchesShow){this.updateTerrainPatchAttributes();}};this.updateTerrainPatchAttributes = function(){if(_.isUndefined(this.patchValues))return;var pl=Math.sqrt(this.patchValues.length);var counter=0;var gridPoints=fp.terrain.gridPoints;var patchSize=fp.patchNetwork.patchSize;var dim=Math.ceil(gridPoints / patchSize);var newPoints=gridPoints + dim;var oldVal=0;for(var i=0;i < this.patchValues.length;i++) {var val=this.patchValues[i].value;var patchCol=i % (dim - 1);var patchRow=Math.floor(i / (dim - 1));for(var j=0;j < patchSize + 3;j++) {for(var k=0;k < patchSize + 3;k++) {if(j == 0 && patchRow != 0)continue;if(k == 0 && patchCol != 0)continue;if(j == this.patchSize + 2 && patchRow < dim - 2)continue;if(k == this.patchSize + 2 && patchCol < dim - 2)continue;var colOffset=patchCol * (patchSize + 1) + k;var rowOffset=(patchRow * (patchSize + 1) + j) * newPoints;var cell=rowOffset + colOffset;counter++;if(oldVal != val){oldVal = val;}this.plane.geometry.attributes.patch.array[cell] = val;}}}this.plane.geometry.attributes.patch.needsUpdate = true;};this.togglePatchesState = function(){if(fp.appConfig.displayOptions.patchesShow){if(this.plane === null)this.buildPatchMesh();else fp.scene.add(this.plane);}else fp.scene.remove(this.plane);};};this.TrailNetwork = function(){this.trails = {};this.trailMeshes = null;this.globalTrailLine = null;this.buildTrailNetwork = function(clone){var len=fp.appConfig.displayOptions.trailLength;var geom=new THREE.Geometry();if(clone){geom = fp.trailNetwork.globalTrailLine.geometry.clone();}for(var i=0;i < fp.agentNetwork.agents.length;i++) {var vertices=new Array(len);for(var j=0;j < len;j++) {var index=i * len + j;if(!clone || index > geom.vertices.length){geom.vertices.push(fp.agentNetwork.agents[i].lastPosition);}}var ai=fp.getIndex(fp.agentNetwork.agents[i].lastPosition.x / fp.appConfig.terrainOptions.multiplier,fp.agentNetwork.agents[i].lastPosition.z / fp.appConfig.terrainOptions.multiplier);if(ai > -1)fp.trailNetwork.trails[ai] = 1;}var trailMaterial=new THREE.LineBasicMaterial({color:fp.appConfig.colorOptions.colorNightTrail,linewidth:1.0,opacity:0.1,blending:THREE.AdditiveBlending,transparent:true});fp.trailNetwork.globalTrailLine = new THREE.Line(geom,trailMaterial,THREE.LineSegments);if(fp.appConfig.displayOptions.trailsShowAsLines){fp.scene.add(fp.trailNetwork.globalTrailLine);}};this.updateTrails = function(){if(!fp.AppState.runSimulation)return;if(fp.appConfig.displayOptions.trailsShow){if(fp.appConfig.displayOptions.trailsShowAsLines){for(var i=0;i < fp.agentNetwork.agents.length;i++) {var agent=fp.agentNetwork.agents[i];var len=fp.appConfig.displayOptions.trailLength;var offset=agent.ticks * 2 % len;if(offset == 0){for(var j=0;j < len;j++) {fp.trailNetwork.globalTrailLine.geometry.vertices[i * len + j] = agent.lastPosition;}}fp.trailNetwork.globalTrailLine.geometry.vertices[i * len + offset] = agent.lastPosition;fp.trailNetwork.globalTrailLine.geometry.vertices[i * len + offset + 1] = agent.position;}fp.trailNetwork.globalTrailLine.geometry.verticesNeedUpdate = true;}else {var weightMax=_.chain(fp.trailNetwork.trails).values().max().value();for(var j in fp.trailNetwork.trails) {var weight=fp.trailNetwork.trails[j];var weightNormed=weight / weightMax;var weightAdjusted=Math.pow(weightNormed,0.2);fp.terrain.plane.geometry.attributes.trail.array[k] = weightAdjusted;}}}else if(fp.appConfig.displayOptions.trailsUpdate){for(var k in fp.trailNetwork.trails) {fp.terrain.plane.geometry.attributes.trail.array[k] = 0.0;}fp.terrain.plane.geometry.attributes.trail.needsUpdate = true;}};};this.Cursor = function(){this.cell = null;this.createCell = function(x,y){var halfGrid=fp.terrain.gridExtent / 2;var cellSize=fp.terrain.gridExtent / (fp.terrain.gridPoints - 1);var cellPixels=fp.terrain.gridSize * cellSize;var cellX=Math.floor((x + halfGrid) / cellPixels);var cellY=Math.floor((y + halfGrid) / cellPixels);var ccX=cellX * cellPixels - halfGrid;var ccY=cellY * cellPixels - halfGrid;var ccZ=fp.getHeight(ccX,ccY);var material=new THREE.LineBasicMaterial({color:0xff0000,linewidth:2});var i,geometry=new THREE.Geometry();for(i = 0;i < fp.terrain.gridSize;i++) {geometry.vertices.push(new THREE.Vector3(ccX,ccY,ccZ));ccX += Math.round(cellSize);ccZ = fp.getHeight(ccX,ccY) + 1;}for(i = 0;i < fp.terrain.gridSize;i++) {geometry.vertices.push(new THREE.Vector3(ccX,ccY,ccZ));ccY += Math.round(cellSize);ccZ = fp.getHeight(ccX,ccY) + 1;}for(i = 0;i < fp.terrain.gridSize;i++) {geometry.vertices.push(new THREE.Vector3(ccX,ccY,ccZ));ccX -= Math.round(cellSize);ccZ = fp.getHeight(ccX,ccY) + 1;}for(i = 0;i < fp.terrain.gridSize;i++) {geometry.vertices.push(new THREE.Vector3(ccX,ccY,ccZ));ccY -= Math.round(cellSize);ccZ = fp.getHeight(ccX,ccY) + 1;}geometry.vertices.push(new THREE.Vector3(ccX,ccY,ccZ) + appConfig.agentOptions.size);if(this.cell)fp.scene.remove(this.cell);this.cell = new THREE.Line(geometry,material);fp.scene.add(this.cell);};this.createCellFill = function(x,y){var halfGrid=fp.terrain.gridExtent / 2;var cellSize=fp.terrain.gridExtent / (fp.terrain.gridPoints - 1);var cellPixels=fp.terrain.gridSize * cellSize;var cellX=Math.floor((x + halfGrid) / cellPixels);var cellY=Math.floor((y + halfGrid) / cellPixels);var ccX=cellX * cellPixels - halfGrid + cellPixels / 2;var ccY=cellY * cellPixels - halfGrid + cellPixels / 2;var ccZ=0;var arrayDim=fp.terrain.gridPoints;var arraySize=fp.terrain.gridExtent / arrayDim;var arrayX=Math.floor((x / fp.appConfig.terrainOptions.multiplier + halfGrid) / arraySize);var arrayY=Math.floor((halfGrid + y / fp.appConfig.terrainOptions.multiplier) / arraySize);var vertices=fp.terrain.plane.geometry.attributes.position.array;var newVertices=[];var cellFill,cellMaterial;if(_.isUndefined(this.cell)){cellFill = new THREE.PlaneGeometry(cellPixels,cellPixels,fp.terrain.gridSize,fp.terrain.gridSize);fp.scene.remove(this.cell);cellMaterial = new THREE.MeshPhongMaterial({color:0xff0000,wireframe:false});cellMaterial.side = THREE.DoubleSide;this.cell = new THREE.Mesh(cellFill,cellMaterial);this.cell.rotation.set(-Math.PI / 2,0,0);this.cell.geometry.dynamic = true;fp.scene.add(this.cell);}var halfCell=Math.round(fp.terrain.gridSize / 2);for(var i=arrayY,counter=0;i < arrayY + fp.terrain.gridSize + 1;i++) {for(var j=arrayX;j < arrayX + fp.terrain.gridSize + 1;j++,counter++) {var index=3 * (arrayDim * (i - halfCell) + (j - halfCell));this.cell.geometry.vertices[counter] = new THREE.Vector3(vertices[index],vertices[index + 1],vertices[index + 2] + fp.appConfig.agentOptions.terrainOffset);}}this.cell.geometry.verticesNeedUpdate = true;};};this.PathNetwork = function(){this.networkMesh = null;this.stepsPerNode = fp.terrain.ratioExtentToPoint;this.graphAStar = null;this.nodes = [];this.opts = null;this.setupAStarGraph = function(){this.opts = {diagonal:true,closest:true};for(var i=0;i < fp.terrain.gridPoints;i++) {var nodeRow=[];for(var j=0;j < fp.terrain.gridPoints;j++) {var weight=1 - fp.terrain.getHeightForIndex(i * fp.terrain.gridPoints + j) / fp.terrain.maxTerrainHeight;weight = weight == 1?0:weight;nodeRow.push(weight);}this.nodes.push(nodeRow);}this.graphAStar = new astar.Graph(this.nodes);this.graphAStar.diagonal = true;};this.nodeAt = function(position){var index=fp.getIndex(position.x,position.z);var x=index % fp.terrain.gridPoints,y=Math.floor(index / fp.terrain.gridPoints);try{return this.graphAStar.grid[x][y];}catch(err) {return undefined;}};this.findPathHome = function(agent){if(!agent.home)return [];var start=this.nodeAt(agent.position);var end=this.nodeAt(agent.home.lod.position);if(_.isUndefined(start) || _.isUndefined(end))return [];var path=astar.astar.search(this.graphAStar,start,end,{closest:this.opts.closest});return path;};this.findPathToOtherAgentsHome = function(agent){var otherAgentHome=null;var networks=_.shuffle(fp.agentNetwork.networks);for(var i=0;i < networks.length;i++) {var network=fp.agentNetwork.networks[i];var links=_.shuffle(network.links);for(var j=0;j < links.length;j++) {var link=links[j];if(link.agent1 == agent)otherAgentHome = link.agent2.home;else if(link.agent2 == agent)otherAgentHome = link.agent1.home;}}if(!otherAgentHome)return [];var start=this.nodeAt(agent.position);var end=this.nodeAt(otherAgentHome.lod.position);if(_.isUndefined(start) || _.isUndefined(end))return [];var path=astar.astar.search(this.graphAStar,start,end,{closest:this.opts.closest});return path;};this.drawPathHome = function(agent){var path=agent.pathComputed;if(_.isUndefined(path) || path.length < 2)return undefined;var pathGeom=new THREE.Geometry();var multiplier=fp.terrain.ratioExtentToPoint;var wrapPercent=fp.terrain.wrappedPercent;path.forEach(function(point){var x=(point.x * multiplier - fp.terrain.halfExtent) * fp.appConfig.terrainOptions.multiplier,z=(point.y * multiplier - fp.terrain.halfExtent) * fp.appConfig.terrainOptions.multiplier,y=fp.getHeight(x,z) + fp.appConfig.agentOptions.terrainOffset,point3d=new THREE.Vector3(x,y,z);var transformedPoint3d=fp.terrain.transformPointFromPlaneToSphere(point3d,wrapPercent);pathGeom.vertices.push(transformedPoint3d);});var pathColor=fp.appConfig.displayOptions.dayShow?fp.appConfig.colorOptions.colorDayPath:fp.appConfig.colorOptions.colorNightPath;var pathMaterial=new THREE.LineBasicMaterial({color:pathColor,linewidth:1.0});var pathLine=new THREE.Line(pathGeom,pathMaterial);this.networkMesh.add(pathLine);return pathLine;};this.updatePath = function(){if(!fp.AppState.runSimulation)return;var children=fp.pathNetwork.networkMesh.children;for(var i=children.length - 1;i >= 0;i--) {fp.pathNetwork.networkMesh.remove(children[i]);}var agentsWithPaths=_.chain(fp.agentNetwork.agents).map(function(agent){if(!_.isUndefined(agent.pathComputed) && agent.pathComputed.length > 1)return agent;}).compact().value();_.each(agentsWithPaths,function(agent){fp.pathNetwork.drawPathHome(agent);});};};this.TERRAIN_MAPS = ["../assets/syd2.bin","../assets/mel2.bin"];this.Terrain = function(){this.plane = null;this.richTerrainMaterial = null;this.simpleTerrainMaterial = null;this.dayTerrainUniforms = null;this.nightTerrainUniforms = null;this.terrainMapIndex = fp.appConfig.terrainOptions.mapIndex;this.gridExtent = fp.appConfig.terrainOptions.gridExtent;this.halfExtent = this.gridExtent / 2;this.gridPoints = fp.appConfig.terrainOptions.gridPoints;this.ratioExtentToPoint = this.gridExtent / this.gridPoints;this.maxTerrainHeight = fp.appConfig.terrainOptions.maxTerrainHeight;this.gridSize = 4;this.planeArray = null;this.sphereArray = null;this.wrappedPercent = 0;this.wrappingState = 0;this.initTerrain = function(data){fp.scene.remove(fp.terrain.plane);var size=fp.terrain.gridExtent * fp.appConfig.terrainOptions.multiplier;var geometry=new THREE.PlaneBufferGeometry(size,size,fp.terrain.gridPoints - 1,fp.terrain.gridPoints - 1);var vertices=geometry.attributes.position.array;var i,j,l=vertices.length,n=Math.sqrt(l),k=l + 1;if(fp.appConfig.terrainOptions.loadHeights){for(i = 0,j = 0;i < l;i++,j += 3) {geometry.attributes.position.array[j + 2] = data[i] / 65535 * fp.terrain.maxTerrainHeight * fp.appConfig.terrainOptions.multiplier;}}else {for(i = 0,j = 0;i < l;i++,j += 3) {geometry.attributes.position.array[j + 2] = 0;}}fp.terrain.simpleTerrainMaterial = new THREE.MeshLambertMaterial({color:0x666666,wireframe:fp.appConfig.displayOptions.wireframeShow});fp.terrain.simpleTerrainMaterial.side = THREE.DoubleSide;fp.terrain.simpleTerrainMaterial.color.setHSL(0.095,1,0.75);var len=geometry.attributes.position.array.length / 3,heights=new Float32Array(len),trailPoints=new Float32Array(len),patchPoints=new Float32Array(len);for(i = 0;i < len;i++) {heights[i] = vertices[i * 3 + 2];trailPoints[i] = 0.0;patchPoints[i] = 0.0;}var terrainAttributes={height:{type:"f",value:null},trail:{type:"f",value:null},patch:{type:"f",value:null}};geometry.addAttribute("height",new THREE.BufferAttribute(heights,1));geometry.addAttribute("trail",new THREE.BufferAttribute(trailPoints,1));geometry.addAttribute("patch",new THREE.BufferAttribute(patchPoints,1));fp.terrain.dayTerrainUniforms = {opacity:{type:"f",value:fp.appConfig.colorOptions.colorTerrainOpacity},groundLevelColor:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorDayTerrainGroundLevel)},lowland1Color:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorDayTerrainLowland1)},lowland2Color:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorDayTerrainLowland2)},midland1Color:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorDayTerrainMidland1)},midland2Color:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorDayTerrainMidland2)},highlandColor:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorDayTerrainHighland)},stop1:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop1},stop2:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop2},stop3:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop3},stop4:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop4},stop5:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop5},size:{type:"f",value:Math.floor(fp.appConfig.agentOptions.size / 2)},maxHeight:{type:"f",value:fp.terrain.maxTerrainHeight * fp.appConfig.terrainOptions.multiplier}};fp.terrain.nightTerrainUniforms = {opacity:{type:"f",value:fp.appConfig.colorOptions.colorTerrainOpacity},groundLevelColor:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorNightTerrainGroundLevel)},lowland1Color:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorNightTerrainLowland1)},lowland2Color:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorNightTerrainLowland2)},midland1Color:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorNightTerrainMidland1)},midland2Color:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorNightTerrainMidland2)},highlandColor:{type:"c",value:new THREE.Color(fp.appConfig.colorOptions.colorNightTerrainHighland)},stop1:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop1},stop2:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop2},stop3:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop3},stop4:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop4},stop5:{type:"f",value:fp.appConfig.colorOptions.colorTerrainStop5},size:{type:"f",value:Math.floor(fp.appConfig.agentOptions.size / 2)},maxHeight:{type:"f",value:fp.terrain.maxTerrainHeight * fp.appConfig.terrainOptions.multiplier + 1}};fp.terrain.richTerrainMaterial = new THREE.ShaderMaterial({uniforms:fp.ShaderUtils.lambertUniforms(fp.terrain.nightTerrainUniforms),attributes:terrainAttributes,vertexShader:fp.ShaderUtils.lambertShaderVertex(fp.ShaderUtils.terrainVertexShaderParams(),fp.ShaderUtils.terrainVertexShaderMain()),fragmentShader:fp.ShaderUtils.lambertShaderFragment(fp.ShaderUtils.terrainFragmentShaderParams(),fp.ShaderUtils.terrainFragmentShaderMain()),lights:true,transparent:true});if(fp.appConfig.terrainOptions.shaderUse){fp.terrain.plane = new THREE.Mesh(geometry,fp.terrain.richTerrainMaterial);}else {fp.terrain.plane = new THREE.Mesh(geometry,fp.terrain.simpleTerrainMaterial);}fp.terrain.planeArray = fp.terrain.plane.geometry.attributes.position.clone();fp.terrain.plane.castShadow = true;fp.terrain.plane.receiveShadow = true;fp.terrain.plane.rotation.set(-Math.PI / 2,0,0);fp.terrain.plane.position.set(0,fp.appConfig.terrainOptions.defaultHeight,0);fp.toggleTerrainPlane();if(fp.appConfig.displayOptions.patchesShow)fp.patchNetwork.buildPatchMesh();fp.toggleDayNight();fp.pathNetwork.setupAStarGraph();if(fp.appConfig.terrainOptions.renderAsSphere){fp.terrain.sphereArray = fp.terrain.constructSphere(fp.terrain.planeArray);}};this.getHeightForIndex = function(index){var x=index % fp.terrain.gridPoints;var y=fp.terrain.gridPoints - Math.floor(index / fp.terrain.gridPoints);var reversedIndex=y * fp.terrain.gridPoints + x;if(index >= 0 && !_.isUndefined(fp.terrain.planeArray.array[index * 3 + 2]))return fp.terrain.planeArray.array[index * 3 + 2];return null;};this.getCoordinatesForIndex = function(index){var x=index % fp.terrain.gridPoints;var y=fp.terrain.gridPoints - Math.floor(index / fp.terrain.gridPoints) - 1;var reversedIndex=y * fp.terrain.gridPoints + x;if(reversedIndex >= 0 && !_.isUndefined(fp.terrain.planeArray.array[reversedIndex * 3 + 0])){var x=fp.terrain.planeArray.array[reversedIndex * 3 + 0];var z=fp.terrain.planeArray.array[reversedIndex * 3 + 1];return [x,z];}return null;};this.flattenTerrain = function(){if(!fp.appConfig.displayOptions.cursorShow)return;var vertices=this.plane.geometry.attributes.position.array;var i,point,meanHeight=0;for(i = 0;i < fp.cursor.cell.geometry.vertices.length;i++) {point = fp.cursor.cell.geometry.vertices[i];meanHeight += fp.getHeight(point.x,-point.y);}meanHeight /= fp.cursor.cell.geometry.vertices.length;for(i = 0;i < fp.cursor.cell.geometry.vertices.length;i++) {point = fp.cursor.cell.geometry.vertices[i];var index=fp.getIndex(point.x,-point.y);this.plane.geometry.attributes.position.array[3 * index + 2] = meanHeight;}this.plane.geometry.attributes.position.needsUpdate = true;this.plane.geometry.verticesNeedUpdate = true;};this.createTerrainColors = function(){for(var y=0;y < 99;y++) {for(var x=0;x < 99;x++) {var r=Math.random();var color=new THREE.Color(r,r,r);var arrayX=x * fp.terrain.gridSize * 2;var arrayY=y * fp.terrain.gridSize * 2;for(var i=arrayY;i < arrayY + fp.terrain.gridSize * 2;i += 2) {for(var j=arrayX;j < arrayX + fp.terrain.gridSize * 2;j++) {var index=(fp.terrain.gridPoints - 1) * i + j;if(fp.terrain.plane.geometry.attributes.uv.array[index]){fp.terrain.plane.geometry.attributes.uv.array[index] = color;fp.terrain.plane.geometry.attributes.uv.array[index + 1] = color;fp.terrain.plane.geometry.attributes.uv.array[index + 1] = color;}}}}}return fp.terrain.plane.geometry.color;};this.sphereOrigin = function(){var size=fp.terrain.gridExtent * fp.appConfig.terrainOptions.multiplier;var he=size / 2;var diameter=he / Math.PI * 2,radius=diameter / 2;var origin=new THREE.Vector3(0,-radius,0);return origin;};this.sphereOriginAngle = function(x,y,z){var size=fp.terrain.gridExtent * fp.appConfig.terrainOptions.multiplier;var he=size / 2;var diameter=he / Math.PI * 2,radius=diameter / 2;var origin=fp.terrain.sphereOrigin();var diff=new THREE.Vector3(x,y,z).sub(origin);var dx=diff.x % radius,sx=$.sign(diff.x),rx=Math.floor(Math.abs(diff.x) / radius);var dz=diff.z % radius,sz=$.sign(diff.z),rz=Math.floor(Math.abs(diff.z) / radius);var angleX=Math.asin(dx / radius);var angleZ=Math.asin(dz / radius);if(y < -radius){angleX = sx * Math.PI - angleX;}var rotation=new THREE.Vector3(angleZ,0,-angleX);return rotation;};this.transformSpherePoint = function(x,y,z){var size=fp.terrain.gridExtent * fp.appConfig.terrainOptions.multiplier;var he=size / 2;var diameter=he / Math.PI * 2,radius=diameter / 2;var origin=this.sphereOrigin();var sx=$.sign(x),sz=$.sign(z);var ax=Math.abs(x),az=Math.abs(z);var mxz=ax > az?ax:az;var angle=Math.atan2(ax,az);var ry=(1 + Math.sin(Math.PI * (mxz / he - 0.5))) / 2 * -diameter;var nry=-ry;var my=radius > nry?radius - nry:nry - radius;var py=Math.cos(Math.asin(my / radius));var dx=sx * py;var dz=sz * py;var rx=dx * Math.sin(angle) * radius;var rz=dz * Math.cos(angle) * radius;var v1=new THREE.Vector3(rx,rz,ry);var v2=new THREE.Vector3();v2.subVectors(origin,v2).normalize().multiplyScalar(y);return v1.add(v2);};this.transformPointFromPlaneToSphere = function(point,percent){if(percent <= 0 || percent > 100)return point;var x=point.x,y=point.y,z=point.z;var nv=new THREE.Vector3(x,y,z);var v2=fp.terrain.transformSpherePoint(x,y,z);var dv=new THREE.Vector3(v2.x,v2.z,v2.y);dv.sub(nv).multiplyScalar(percent / 100);nv.add(dv);return nv;};this.constructSphere = function(planeArray){var sphereArray=planeArray.clone();var l=sphereArray.array.length;for(var j=0;j < l;j += 3) {var x=planeArray.array[j + 0];var z=planeArray.array[j + 1];var y=planeArray.array[j + 2];var v=this.transformSpherePoint(x,y,z);sphereArray.array[j + 0] = v.x;sphereArray.array[j + 1] = v.y;sphereArray.array[j + 2] = v.z;}return sphereArray;};this.wrapTerrainIntoSphere = function(percent){this.wrappedPercent = percent;if(!_.isUndefined(percent) && percent <= 100 && percent >= 0){var l=fp.terrain.sphereArray.array.length;for(var i=0;i < l;i++) {var pv=fp.terrain.planeArray.array[i];var sv=fp.terrain.sphereArray.array[i];var nv=pv + (sv - pv) * (percent / 100);fp.terrain.plane.geometry.attributes.position.array[i] = nv;}fp.terrain.plane.geometry.attributes.position.needsUpdate = true;if(!_.isNull(fp.patchNetwork.plane)){l = fp.patchNetwork.patchSphereArray.array.length;for(var i=0;i < l;i++) {var pv=fp.patchNetwork.patchPlaneArray.array[i];var sv=fp.patchNetwork.patchSphereArray.array[i];var nv=pv + (sv - pv) * (percent / 100);fp.patchNetwork.plane.geometry.attributes.position.array[i] = nv;}fp.patchNetwork.plane.geometry.attributes.position.needsUpdate = true;}fp.buildingNetwork.buildings.forEach(function(building){building.lod.matrixAutoUpdate = false;var cv=_.clone(building.originPosition);var nv=fp.terrain.transformPointFromPlaneToSphere(cv,100);var v=fp.terrain.sphereOriginAngle(nv.x,nv.y,nv.z).multiplyScalar(percent / 100);nv = fp.terrain.transformPointFromPlaneToSphere(cv,percent);building.mesh.rotation.set(-Math.PI / 2 + v.x,-v.z,v.y);building.mesh.position.set(nv.x,nv.y,nv.z);building.lod.rotation.set(-Math.PI / 2 + v.x,-v.z,v.y);building.lod.position.set(nv.x,nv.y,nv.z);building.highResMeshContainer.rotation.set(-Math.PI / 2 + v.x,-v.z,v.y);building.highResMeshContainer.position.set(nv.x,nv.y,nv.z);building.lowResMeshContainer.rotation.set(-Math.PI / 2 + v.x,-v.z,v.y);building.lowResMeshContainer.position.set(nv.x,nv.y,nv.z);});for(var j=0;j < fp.roadNetwork.planeVertices.length;j++) {var transformedVertices=[];var vertices=fp.roadNetwork.planeVertices[j];for(var i=0;i < vertices.length;i++) {transformedVertices.push(fp.terrain.transformPointFromPlaneToSphere(vertices[i],percent));}fp.roadNetwork.networkMesh.children[j].geometry.vertices = transformedVertices;fp.roadNetwork.networkMesh.children[j].geometry.verticesNeedUpdate = true;}for(var j=0;j < fp.pathNetwork.networkMesh.children.length;j++) {var transformedVertices=[];var vertices=fp.pathNetwork.networkMesh.children[j];for(var i=0;i < vertices.length;i++) {transformedVertices.push(fp.terrain.transformPointFromPlaneToSphere(vertices[i],percent));}fp.pathNetwork.networkMesh.children[j].geometry.vertices = transformedVertices;fp.pathNetwork.networkMesh.children[j].geometry.verticesNeedUpdate = true;}for(var j=0;j < fp.agentNetwork.agents.length;j++) {var agent=fp.agentNetwork.agents[j];var nv=fp.terrain.transformPointFromPlaneToSphere(agent.position,percent);fp.agentNetwork.particles.geometry.vertices[j] = nv;}if(!_.isNull(fp.agentNetwork.particles))fp.agentNetwork.particles.geometry.verticesNeedUpdate = true;for(var j=0;j < fp.agentNetwork.networks.length;j++) {var transformedVertices=[];var network=fp.agentNetwork.networks[j];if(!_.isNull(network.networkMesh)){var vertices=network.networkMesh.geometry.vertices;for(var i=0;i < vertices.length;i++) {transformedVertices.push(fp.terrain.transformPointFromPlaneToSphere(vertices[i],percent));}network.networkMesh.geometry.vertices = transformedVertices;network.networkMesh.geometry.verticesNeedUpdate = true;}}}};this.updateTerrain = function(){if(this.wrappingState === 1){fp.appConfig.displayOptions.waterShow = false;if(fp.terrain.wrappedPercent < 100){fp.terrain.wrapTerrainIntoSphere(fp.terrain.wrappedPercent);fp.terrain.wrappedPercent += this.wrappingState;}else {this.wrappingState = 0;}}else if(this.wrappingState === -1){if(fp.terrain.wrappedPercent > 0){fp.terrain.wrapTerrainIntoSphere(fp.terrain.wrappedPercent);fp.terrain.wrappedPercent += this.wrappingState;}else {fp.appConfig.displayOptions.waterShow = fp.appConfig.displayOptions.waterShow;this.wrappingState = 0;}}fp.toggleWaterState();};};this.Timescale = function(){this.initialYear = 1800;this.endYear = 2200;this.terminate = false;this.currentYear = this.initialYear;this.MAX_FRAMES_TO_YEAR = 480;this.MIN_FRAMES_TO_YEAR = 1;this.TOP_SPEED = 60 / this.MIN_FRAMES_TO_YEAR;this.MIN_FRAMES_TO_YEAR = null;this.framesToYear = 32;this.frameCounter = 0;};this.Agent = function(){this.updateTick = function(){this.ticks++;this.age++;};this.setDirection = function(dir){this.direction = dir;};this.setPosition = function(v){this.lastPosition = this.position = v;};this.findBuilding = function(){var xl=this.lastPosition.x,zl=this.lastPosition.z;return fp.buildingNetwork.buildingHash[fp.getIndex(xl,zl)];};this.goingUp = function(building){return building == this.home?Math.random() < fp.appConfig.agentOptions.visitHomeBuilding:Math.random() < fp.appConfig.agentOptions.visitOtherBuilding;};this.updateGroundedState = function(building){var xl=this.lastPosition.x,yl=this.lastPosition.y,zl=this.lastPosition.z,xd=this.direction.x,yd=this.direction.y,zd=this.direction.z;if(!this.grounded){var base=fp.getHeight(xl,zl) + fp.appConfig.agentOptions.terrainOffset;if(yl <= base && yd < 0)this.grounded = true;}else if(!_.isUndefined(building) && this.goingUp(building)){this.grounded = false;}};this.nextComputedDirection = function(){if(!this.pathComputed)return undefined;if(this.pathPosition + 1 >= this.pathComputed.length){this.pathPosition = 0;this.pathComputed = undefined;return this.randomDirection();}var multiplier=fp.terrain.ratioExtentToPoint;var nextNode=this.pathComputed[this.pathPosition + 1],x=(nextNode.x * multiplier - fp.terrain.halfExtent) * fp.appConfig.terrainOptions.multiplier,z=(nextNode.y * multiplier - fp.terrain.halfExtent) * fp.appConfig.terrainOptions.multiplier;if((this.position.x + this.direction.x - x) * $.sign(this.direction.x) > 0 || (this.position.z + this.direction.z - z) * $.sign(this.direction.z) > 0){this.pathPosition++;if(this.pathPosition + 1 < this.pathComputed.length){nextNode = this.pathComputed[this.pathPosition + 1];x = (nextNode.x * multiplier - fp.terrain.halfExtent) * fp.appConfig.terrainOptions.multiplier;z = (nextNode.y * multiplier - fp.terrain.halfExtent) * fp.appConfig.terrainOptions.multiplier;}}var xd=x - this.position.x,zd=z - this.position.z,xDir=xd / (Math.abs(xd) + Math.abs(zd)),zDir=zd / (Math.abs(xd) + Math.abs(zd)),dir=new THREE.Vector3(xDir,0,zDir);return dir;};this.candidateDirections = function(){var xl=this.lastPosition.x,yl=this.lastPosition.y,zl=this.lastPosition.z,xd=this.direction.x,yd=this.direction.y,zd=this.direction.z,isAlreadyOnRoad=fp.roadNetwork.indexValues.indexOf(fp.getIndex(xl,zl)) > -1;var directionCount=10,directions=new Array(directionCount);var dir=this.nextComputedDirection();if(!_.isUndefined(dir))return [[dir,1.0]];var building=this.findBuilding();this.updateGroundedState(building);var weight=1.0,weightForRoadIsSet=false;var newSpeed=Math.random() * this.speed / 2,angle=Math.atan2(zd,xd),hyp=Math.sqrt(xd * xd + zd * zd),divisor=(directionCount - 2) / 2;for(var i=0;i < directionCount;i++) {if(i < 8 && !this.grounded || i >= 8 && this.grounded)continue;if(i < 8 && this.grounded){var newAngle=angle + i * Math.PI / divisor;xd = Math.cos(newAngle) * hyp;yd = 0;zd = Math.sin(newAngle) * hyp;}else if(!this.grounded && i >= 8){xd = 0;yd = i == 8?newSpeed:-newSpeed;zd = 0;}var xn=xl + xd,yn=yl + yd,zn=zl + zd,isRoad=fp.roadNetwork.indexValues.indexOf(fp.getIndex(xn,zn)) > -1;if(yd === 0){yn = fp.getHeight(xn,zn);yd = (fp.appConfig.agentOptions.terrainOffset + yn - yl) / fp.terrain.ratioExtentToPoint;}if(yn === null)continue;if(i === 0){weight = 0.999;if(isRoad)weightForRoadIsSet = true;}else {if(!weightForRoadIsSet && isRoad){if(!isAlreadyOnRoad)weight = 0.999;else weight = 0.5;weightForRoadIsSet = true;}else weight = 0.001;}if(yn > yl && this.grounded && fp.appConfig.agentOptions.noUphill)weight *= yl / yn;if(i == 0 && yn <= 0 && fp.appConfig.agentOptions.noWater)weight = 0.0;if(!this.grounded && !_.isUndefined(building)){var buildingHeight=building.levels * fp.appConfig.buildingOptions.levelHeight + building.lod.position.y;if(i == 8){if(yl >= buildingHeight || this.direction.y < 0)weight = 0.0;else weight = 1.0;}else if(i == 9){if(yl >= buildingHeight || this.direction.y < 0)weight = 1.0;else if(this.direction.y > 0 && Math.random() > 0.99)weight = 1.0;else weight = 0.0;}}directions[i] = [new THREE.Vector3(xd,yd,zd),weight];}directions = _.chain(directions).compact().sort(function(a,b){return a[1] > b[1]?1:a[1] < b[1]?-1:0;}).value();if(directions.length === 0){var x=-this.direction.x;var z=-this.direction.z;var direction=new THREE.Vector3(x,fp.getHeight(x,z),z);directions.push([direction,1.0]);}return directions;};this.generateDirectionVectorsAndWeights = function(seed){var xl=this.lastPosition.x,yl=this.lastPosition.y,zl=this.lastPosition.z,xd=this.direction.x,yd=this.direction.y,zd=this.direction.z,isAlreadyOnRoad=fp.roadNetwork.indexValues.indexOf(fp.getIndex(xl,zl)) > -1;if(_.isUndefined(this.pathComputed) || this.pathComputed.length < 2){if(Math.random() < fp.appConfig.agentOptions.chanceToFindPathToHome){this.pathComputed = fp.pathNetwork.findPathHome(this);this.pathPosition = 0;}else if(Math.random() < fp.appConfig.agentOptions.chanceToFindPathToOtherAgentHome){this.pathComputed = fp.pathNetwork.findPathToOtherAgentsHome(this);this.pathPosition = 0;}}var dir=this.nextComputedDirection();if(!_.isUndefined(dir))return [[dir,1.0]];var directionCount=8,directions=new Array(directionCount);var weight=1.0,weightForRoadIsSet=false;var angle=Math.atan2(zd,xd),hyp=Math.sqrt(xd * xd + zd * zd),divisor=directionCount / 2;for(var i=0;i < directionCount;i++) {var newAngle=angle + i * Math.PI / divisor;xd = Math.cos(newAngle) * hyp;yd = 0;zd = Math.sin(newAngle) * hyp;var xn=xl + xd,yn=yl + yd,zn=zl + zd,isRoad=fp.roadNetwork.indexValues.indexOf(fp.getIndex(xn,zn)) > -1;switch(i){case 0:weight = Math.pow(seed,1);break;case 1:case 7:weight = Math.pow(seed,3);break;case 2:case 4:case 6:weight = Math.pow(seed,4);break;case 3:case 5:weight = Math.pow(seed,5);break;}yn = fp.getHeight(xn,zn);if(yn === null)continue;if(yn <= fp.appConfig.terrainOptions.defaultHeight)weight = 0;yn += fp.appConfig.terrainOptions.defaultHeight;yn += fp.appConfig.agentOptions.terrainOffset;yn += fp.appConfig.agentOptions.size / 2;yd = (yn - yl) / fp.terrain.ratioExtentToPoint;directions[i] = [new THREE.Vector3(xd,yd,zd),weight];}directions = _.chain(directions).compact().shuffle().sort(function(a,b){return a[1] > b[1]?1:a[1] < b[1]?-1:0;}).value();return directions;};this.bestCandidate = function(){var directions=this.generateDirectionVectorsAndWeights(0.1);var total=_.chain(directions).map(function(d){return d[1];}).reduce(function(memo,num){return memo + num;},0).value();var weightsNormed=_.chain(directions).map(function(d){return d[1] / total;}).sort().reverse().value();var r=Math.random();var index=0,runningTotal=0,len=directions.length - 1;for(var i=0;i < weightsNormed.length;i++) {var a=weightsNormed[i];runningTotal += a;if(r < runningTotal && i < directions.length){return directions[len - i][0];}}return this.randomDirection();};this.move = function(){var directionAtSpeed=this.direction.clone().multiplyScalar(16 / fp.timescale.framesToYear);var factor=fp.appConfig.terrainOptions.multiplier;if(fp.appConfig.agentOptions.movementRelativeToPatch){factor *= fp.appConfig.terrainOptions.patchSize * (fp.appConfig.agentOptions.movementInPatch / 100);}directionAtSpeed.x *= factor;directionAtSpeed.z *= factor;var newPosition=this.position.clone().add(directionAtSpeed);var bound=fp.appConfig.terrainOptions.multiplier * fp.terrain.gridExtent / 2;if(newPosition.x < -bound || newPosition.x >= bound || newPosition.z < -bound || newPosition.z >= bound){this.setDirection(this.randomDirection());}else {this.position = newPosition;}};this.evaluateDirection = function(){this.lastPosition = this.position;this.setDirection(this.bestCandidate());};this.compassDirections = function(){var direction=0,directions=[];for(var i=0;i < 8;i++) {var x=Math.cos(direction) / 2;var z=Math.sin(direction) / 2;directions.push([x,z]);direction += Math.PI / 4;}return directions;};this.randomDirection = function(){if(fp.appConfig.agentOptions.movementStrictlyIntercardinal){return new THREE.Vector3(this.speed * (Math.random() - 0.5),0,this.speed * (Math.random() - 0.5));}else {var directions=this.compassDirections();var index=Math.floor(Math.random() * 8);var pos=directions[index];var vec=new THREE.Vector3(this.speed * pos[0],0,this.speed * pos[1]);return vec;}};this.nearestNeighbour = function(ignoreHeight){var agents=fp.agentNetwork.agents;var x=this.position.x,y=this.position.y,z=this.position.z;var nearest=null,leastLen=0;for(var i=0;i < agents.length;i++) {var agent=agents[i];if(agent == this)continue;var ox=agent.position.x,oy=agent.position.y,oz=agent.position.z;var len=Math.sqrt(Math.pow(ox - x,2) + Math.pow(oz - z,2));if(!ignoreHeight){len = Math.sqrt(Math.pow(len,2) + Math.pow(oy - y,2));}if(leastLen == 0 || len < leastLen){nearest = agent;leastLen = len;}}return nearest;};this.setRandomDirection = function(){this.setDirection(this.randomDirection());};this.perturbDirection = function(){this.direction.x += this.perturbBy * (Math.random() - 0.5);this.direction.z += this.perturbBy * (Math.random() - 0.5);};this.calculateLikelihoodOfHome = function(index){var proximityTests=fp.buildingNetwork.proximityFunctions();for(var i=proximityTests.length - 1;i >= 0;i--) {var proximityTest=proximityTests[i];var func=_.first(proximityTest);var values=_.rest(proximityTest);var response=func.apply(fp,_.union([index],values));if(response)return true;};return false;};this.build = function(){if(!fp.appConfig.buildingOptions.create)return false;if(this.home !== null)return false;if(this.position === null)return false;var index=fp.getIndex(this.position.x,this.position.z);if(_.isUndefined(index))return false;if(!_.isUndefined(fp.buildingNetwork.buildingHash[index]))return false;var dimensions=fp.buildingNetwork.generateRandomDimensions();if(fp.buildingNetwork.buildings.length === 0){this.home = fp.buildingNetwork.createBuilding(this.position,dimensions);return !_.isUndefined(this.home);}else if(fp.buildingNetwork.networkMesh.children.length >= fp.appConfig.buildingOptions.maxNumber)return false;if(!_.isNull(fp.stats) && fp.statss <= 10)return false;var shouldBuildHome=this.calculateLikelihoodOfHome(index);if(shouldBuildHome){this.home = fp.buildingNetwork.createBuilding(this.position,dimensions);return !_.isUndefined(this.home);}return false;};this.buildRoad = function(){if(!fp.appConfig.roadOptions.create)return false;var xOrig=this.position.x,zOrig=this.position.z,index=fp.getIndex(xOrig,zOrig),xInit=fp.appConfig.agentOptions.initialX,zInit=fp.appConfig.agentOptions.initialY,xd=xOrig - xInit,zd=zOrig - zInit,distanceFromInitialPoint=Math.sqrt(xd * xd + zd * zd),buildingIndex=_.map(fp.buildingNetwork.buildings,function(building){return fp.getIndex(building.lod.position.x,building.lod.position.z);});if(fp.roadNetwork.networkMesh.children.length >= fp.appConfig.roadOptions.maxNumber)return false;if(!_.isNull(fp.stats) && fp.statss <= 10)return false;if(fp.appConfig.displayOptions.buildingsShow){if(fp.buildingNetwork.buildings.length === 0){return false;}else if(fp.buildingNetwork.buildings.length == 1){if(buildingIndex.indexOf(index) == -1)return false;}}if(fp.roadNetwork.indexValues.length === 0){if(distanceFromInitialPoint > fp.appConfig.roadOptions.initialRadius)return false;}else {if(fp.roadNetwork.indexValues.indexOf(index) == -1)return false;if(buildingIndex.indexOf(index) == -1){var r=Math.random();var chance=1 / (Math.log(distanceFromInitialPoint + 1) * fp.appConfig.roadOptions.probability);if(chance < r)return false;}}var xr=Math.random() * 2 - 0.5,zr=Math.random() * 2 - 0.5,lenMinimum=fp.appConfig.roadOptions.lenMinimum,lenMaximum=fp.appConfig.roadOptions.lenMaximum,lenFactor=Math.random();var existingRoad=fp.roadNetwork.roads[index];if(existingRoad){var ps=_.first(existingRoad.geometry.vertices),pe=_.last(existingRoad.geometry.vertices),xChange=ps.x - pe.x,zChange=ps.z - pe.z,angle=Math.atan2(zChange,xChange),turn=Math.round(Math.random()),angle90=angle + Math.PI / 2 + Math.PI * turn;xr = Math.cos(angle90);zr = Math.sin(angle90);}var totalLen=lenMinimum + (lenMaximum - lenMinimum) * (1 - jStat.exponential.cdf(lenFactor,fp.appConfig.roadOptions.lenDistributionFactor)),xExtent=xr * totalLen,zExtent=zr * totalLen,xEnd=this.position.x + xExtent,zEnd=this.position.z + zExtent,yEnd=fp.getHeight(xEnd,zEnd),endPoint=new THREE.Vector3(xEnd,yEnd,zEnd),xe=xOrig - xEnd,ze=zOrig - zEnd,distanceFromEnd=Math.sqrt(xe * xe + ze * ze),width=Math.ceil(1 / Math.log(distanceFromInitialPoint + 10) * Math.log(distanceFromEnd) * fp.appConfig.roadOptions.roadWidth);return fp.roadNetwork.addRoad(this.position,endPoint,width);};this.vertex = null;this.position = null;this.direction = null;this.speed = fp.appConfig.agentOptions.initialSpeed;this.perturbBy = fp.appConfig.agentOptions.initialPerturbBy;this.lastPosition = null;this.grounded = true;this.alpha = 0.5 + Math.random() / 2;this.color = "#ff0000";this.ticks = 0;this.age = 0;this.home = null;this.health = 100;this.gender = Math.random() < 0.5?"f":"m";this.children = [];this.friends = [];this.pathComputed = undefined;this.pathPosition = 0;};this.Building = function(form,dimensions,position,rotation){this.initDimensions = function(dimensions){this.lod = new THREE.LOD();this.yOffset = 0;this.levels = 0;this.localMaxLevels = dimensions.levels;this.localWidth = dimensions.width;this.localLength = dimensions.length;var fc,lc,wc;if(fp.appConfig.displayOptions.dayShow){fc = fp.buildColorVector(fp.appConfig.colorOptions.colorDayBuildingFill);lc = fp.buildColorVector(fp.appConfig.colorOptions.colorDayBuildingLine);wc = fp.buildColorVector(fp.appConfig.colorOptions.colorDayBuildingWindow);}else {fc = fp.buildColorVector(fp.appConfig.colorOptions.colorNightBuildingFill);lc = fp.buildColorVector(fp.appConfig.colorOptions.colorNightBuildingLine);wc = fp.buildColorVector(fp.appConfig.colorOptions.colorNightBuildingWindow);}this.lineMaterial = new THREE.LineBasicMaterial({color:lc,linewidth:fp.appConfig.buildingOptions.linewidth});this.windowMaterial = new THREE.MeshBasicMaterial({color:wc});this.windowMaterial.side = THREE.DoubleSide;this.buildingMaterial = new THREE.MeshBasicMaterial({color:fc});this.buildingMaterial.side = THREE.DoubleSide;this.buildingMaterial.opacity = 1;this.geometry = new THREE.Geometry();for(var i=0;i < fp.appConfig.maxLevels * 16 + 8;i++) this.geometry.vertices.push(new THREE.Vector3(0,0,0));this.geometry.verticesNeedUpdate = true;this.mesh = new THREE.Object3D();this.highResMeshContainer = new THREE.Object3D();this.lowResMeshContainer = new THREE.Object3D();if(!fp.appConfig.buildingOptions.useShader){this.mesh = new THREE.Line(this.geometry,this.lineMaterial,THREE.LineSegments);this.highResMeshContainer.add(this.mesh);this.windowsOutlineContainer = new THREE.Object3D();if(fp.appConfig.buildingOptions.windowsLine)this.highResMeshContainer.add(this.windowsOutlineContainer);this.windowsFillContainer = new THREE.Object3D();if(fp.appConfig.buildingOptions.windowsFill)this.highResMeshContainer.add(this.windowsFillContainer);}if(fp.appConfig.buildingOptions.useLevelOfDetail){this.lod.addLevel(this.highResMeshContainer,fp.appConfig.buildingOptions.highResDistance);this.lod.addLevel(this.lowResMeshContainer,fp.appConfig.buildingOptions.lowResDistance);this.lowResGeometry = new THREE.BoxGeometry(fp.appConfig.buildingOptions.width,(this.levels + 1) * fp.appConfig.buildingOptions.levelHeight,fp.appConfig.buildingOptions.length);this.lowResGeometry.applyMatrix(new THREE.Matrix4().makeTranslation(0,(this.levels + 1) * fp.appConfig.buildingOptions.levelHeight / 2,0));this.lowResMesh = new THREE.Mesh(this.lowResGeometry,this.buildingMaterial);this.lowResMeshContainer.add(this.lowResMesh);}else this.lod.addLevel(this.highResMeshContainer,1);this.lod.updateMatrix();this.lod.matrixAutoUpdate = false;};this.addFloor = function(){var base=this.levels * fp.appConfig.buildingOptions.levelHeight;var points=fp.BUILDING_FORMS[this.buildingForm](this.localWidth,this.localLength,base);if(!fp.appConfig.buildingOptions.useShader){if(fp.appConfig.buildingOptions.showLines){this.geometry.dynamic = true;this.generateSkeleton(points);this.geometry.verticesNeedUpdate = true;}if(fp.appConfig.buildingOptions.showFill)this.generateExtrudedShape(points);if(fp.appConfig.buildingOptions.showWindows)this.generateWindows(points);}else {this.shadedShape(points);}this.levels++;this.updateSimpleBuilding();if(fp.appConfig.buildingOptions.stagger){if(fp.appConfig.buildingOptions.taper){var percentage=this.levels / this.localMaxLevels;var sq=Math.pow(percentage,fp.appConfig.buildingOptions.taperExponent);var hurdle=jStat.exponential.cdf(sq,fp.appConfig.buildingOptions.taperDistribution);if(Math.random() < hurdle){this.localWidth -= fp.appConfig.buildingOptions.staggerAmount;this.localLength -= fp.appConfig.buildingOptions.staggerAmount;}}else {this.localWidth -= fp.appConfig.buildingOptions.staggerAmount;this.localLength -= fp.appConfig.buildingOptions.staggerAmount;}}};this.removeFloor = function(){var topFloor=this.highResMeshContainer.children[this.highResMeshContainer.children.length - 1];this.highResMeshContainer.remove(topFloor);this.levels--;this.updateSimpleBuilding();};this.generateSkeleton = function(points){var i,base=points[0].y;var height=base + fp.appConfig.buildingOptions.levelHeight;var offset=fp.getOffset(this.levels,points.length);if(this.levels === 0){this.geometry.vertices[offset] = points[0];for(i = 1;i < points.length;i++) {this.geometry.vertices[offset + i * 2 - 1] = points[i];this.geometry.vertices[offset + i * 2] = points[i];}this.geometry.vertices[offset + points.length * 2 - 1] = points[0];offset += points.length * 2;}for(i = 0;i < points.length;i++) {this.geometry.vertices[offset + i * 2] = points[i];this.geometry.vertices[offset + i * 2 + 1] = new THREE.Vector3(points[i].x,height,points[i].z);}offset += points.length * 2;this.geometry.vertices[offset] = new THREE.Vector3(points[0].x,height,points[0].z);for(i = 1;i < points.length;i++) {this.geometry.vertices[offset + i * 2 - 1] = new THREE.Vector3(points[i].x,height,points[i].z);this.geometry.vertices[offset + i * 2] = new THREE.Vector3(points[i].x,height,points[i].z);}this.geometry.vertices[offset + points.length * 2 - 1] = new THREE.Vector3(points[0].x,height,points[0].z);};this.generateExtrudedShape = function(points){var base=points[0].y;var height=base + fp.appConfig.buildingOptions.levelHeight;var offset=fp.getOffset(this.levels,points.length);var shape=new THREE.Shape();shape.moveTo(points[0].x,points[0].z);for(var i=1;i < points.length;i++) {shape.lineTo(points[i].x,points[i].z);}shape.lineTo(points[0].x,points[0].z);var extrudeSettings={amount:fp.appConfig.buildingOptions.levelHeight * 1.0,bevelEnabled:false};var shapeGeometry=new THREE.ExtrudeGeometry(shape,extrudeSettings);shapeGeometry.faceVertexUvs[0][0][0].set(0,0);shapeGeometry.faceVertexUvs[0][0][1].set(0,0);shapeGeometry.faceVertexUvs[0][0][2].set(0,0);shapeGeometry.faceVertexUvs[0][1][0].set(0,0);shapeGeometry.faceVertexUvs[0][1][1].set(0,0);shapeGeometry.faceVertexUvs[0][1][2].set(0,0);shapeGeometry.faceVertexUvs[0][2][0].set(0,0);shapeGeometry.faceVertexUvs[0][2][1].set(0,0);shapeGeometry.faceVertexUvs[0][2][2].set(0,0);shapeGeometry.faceVertexUvs[0][3][0].set(0,0);shapeGeometry.faceVertexUvs[0][3][1].set(0,0);shapeGeometry.faceVertexUvs[0][3][2].set(0,0);shapeGeometry.computeBoundingBox();if(shapeGeometry.boundingBox){var fc=fp.appConfig.displayOptions.dayShow?fp.appConfig.colorOptions.colorDayBuildingFill:fp.appConfig.colorOptions.colorNightBuildingFill;var buildingMaterial=new THREE.MeshBasicMaterial({color:fc});var box=new THREE.Mesh(shapeGeometry,buildingMaterial);box.rotation.set(Math.PI / 2,0,0);box.position.set(0,height,0);box.geometry.verticesNeedUpdate = true;this.highResMeshContainer.add(box);}};this.generateWindows = function(points){var base=points[0].y + fp.appConfig.agentOptions.terrainOffset;var offset=fp.getOffset(this.levels,points.length);var windowHeight=(fp.appConfig.buildingOptions.windowsEndY - fp.appConfig.buildingOptions.windowsStartY) / 100 * fp.appConfig.buildingOptions.levelHeight;var winActualWidth=fp.appConfig.buildingOptions.windowPercent / 100 * fp.appConfig.buildingOptions.windowWidth;var shape=new THREE.Shape();shape.moveTo(0,0);shape.lineTo(winActualWidth,0);shape.lineTo(winActualWidth,windowHeight);shape.lineTo(0,windowHeight);shape.lineTo(0,0);var extrudeSettings={amount:1.0,bevelEnabled:false};var shapeGeometry=new THREE.ExtrudeGeometry(shape,extrudeSettings);var box=new THREE.Mesh(shapeGeometry,this.windowMaterial);var outlineGeometry=new THREE.ShapeGeometry(shape);var windowPoints=shape.createPointsGeometry();var windowOutline=new THREE.Line(windowPoints,this.lineMaterial);for(var i=0;i < points.length;i++) {var previousPoint;if(i === 0)previousPoint = points[points.length - 1];else previousPoint = points[i - 1];var currentPoint=points[i];var xDiff=currentPoint.x - previousPoint.x;var zDiff=currentPoint.z - previousPoint.z;var lineLength=Math.sqrt(xDiff * xDiff + zDiff * zDiff);var windowCount=Math.floor(lineLength / fp.appConfig.buildingOptions.windowWidth);var winOffset=(fp.appConfig.buildingOptions.windowWidth - winActualWidth) / 2;var windowStart=base + fp.appConfig.buildingOptions.levelHeight * (fp.appConfig.buildingOptions.windowsStartY / 100);var windowEnd=base + fp.appConfig.buildingOptions.levelHeight * (fp.appConfig.buildingOptions.windowsEndY / 100);var winW=winActualWidth * (xDiff / lineLength);var winL=winActualWidth * (zDiff / lineLength);var winOffsetW=winOffset * (xDiff / lineLength);var winOffsetL=winOffset * (zDiff / lineLength);var angle=Math.atan2(xDiff,zDiff) + Math.PI / 2;for(var j=0;j < windowCount;j++) {var winX=previousPoint.x + j * xDiff / windowCount + winOffsetW;var winZ=previousPoint.z + j * zDiff / windowCount + winOffsetL;if(fp.appConfig.buildingOptions.windowsFill){var boxCopy=box.clone();boxCopy.position.set(winX + winW,windowStart,winZ + winL);boxCopy.rotation.set(0,angle,0);this.windowsFillContainer.add(boxCopy);}if(fp.appConfig.buildingOptions.windowsLine){var windowOutlineCopy=windowOutline.clone();windowOutlineCopy.position.set(winX + winW,windowStart,winZ + winL);windowOutlineCopy.rotation.set(0,angle,0);this.windowsOutlineContainer.add(windowOutlineCopy);}}}};this.shadedShapeMock = function(){var base=this.levels * fp.appConfig.buildingOptions.levelHeight + fp.appConfig.terrainOptions.defaultHeight;var points=fp.BUILDING_FORMS[this.buildingForm](this.localWidth,this.localLength,base);var base=points[0].y;var height=base;var offset=fp.getOffset(this.levels,points.length);var shape=new THREE.Shape();shape.moveTo(points[0].x,points[0].z);for(var i=1;i < points.length;i++) shape.lineTo(points[i].x,points[i].z);shape.lineTo(points[0].x,points[0].z);var extrudeSettings={amount:fp.appConfig.buildingOptions.levelHeight * 1.0,bevelEnabled:false};var shapeGeometry=new THREE.ExtrudeGeometry(shape,extrudeSettings);shapeGeometry.computeBoundingBox();var mesh;if(shapeGeometry.boundingBox){var dumbMaterial=new THREE.MeshBasicMaterial({color:"#ff0000"});dumbMaterial.visible = false;mesh = new THREE.Mesh(shapeGeometry,dumbMaterial);mesh.rotation.set(-Math.PI / 2,0,0);var height=fp.getHeight(this.highResMeshContainer.position.x,this.highResMeshContainer.position.z);mesh.position.set(this.highResMeshContainer.position.x,height,this.highResMeshContainer.position.z);mesh.updateMatrix();return mesh;}return null;};this.shadedShapeGeometry = function(points){var shape=new THREE.Shape();shape.moveTo(points[0].x,points[0].z);for(var i=1;i < points.length;i++) shape.lineTo(points[i].x,points[i].z);shape.lineTo(points[0].x,points[0].z);return shape;};this.shadedShape = function(points){var base=points[0].y;var height=base;var offset=fp.getOffset(this.levels,points.length);var shape=this.shadedShapeGeometry(points);var extrudeSettings={amount:fp.appConfig.buildingOptions.levelHeight * 1.0,bevelEnabled:false};var shapeGeometry=new THREE.ExtrudeGeometry(shape,extrudeSettings);shapeGeometry.computeBoundingBox();if(shapeGeometry.boundingBox){if(this.levels === 0){var fc,lc,wc;if(fp.appConfig.displayOptions.dayShow){fc = fp.buildColorVector(fp.appConfig.colorOptions.colorDayBuildingFill);lc = fp.buildColorVector(fp.appConfig.colorOptions.colorDayBuildingLine);wc = fp.buildColorVector(fp.appConfig.colorOptions.colorDayBuildingWindow);}else {fc = fp.buildColorVector(fp.appConfig.colorOptions.colorNightBuildingFill);lc = fp.buildColorVector(fp.appConfig.colorOptions.colorNightBuildingLine);wc = fp.buildColorVector(fp.appConfig.colorOptions.colorNightBuildingWindow);}var showLines=fp.buildingNetwork.buildings.length > 1 && fp.appConfig.buildingOptions.showLines;var showWindows=fp.appConfig.buildingOptions.showWindows;this.uniforms = {time:{type:"f",value:1.0},location:{type:"v2",value:new THREE.Vector2(this.lod.position.x,this.lod.position.z)},resolution:{type:"v2",value:new THREE.Vector2()},dimensions:{type:"v3",value:new THREE.Vector3(shapeGeometry.boundingBox.max.x - shapeGeometry.boundingBox.min.x,fp.appConfig.buildingOptions.levelHeight,shapeGeometry.boundingBox.max.y - shapeGeometry.boundingBox.min.y)},bottomWindow:{type:"f",value:this.bottomWindow},topWindow:{type:"f",value:this.topWindow},windowWidth:{type:"f",value:this.windowWidth},windowPercent:{type:"f",value:this.windowPercent},floorLevel:{type:"f",value:this.levels},lineColor:{type:"v3",value:lc},lineWidth:{type:"f",value:fp.appConfig.buildingOptions.linewidth},fillColor:{type:"v3",value:fc},windowColor:{type:"v3",value:wc},showLines:{type:"i",value:showLines?1:0},showFill:{type:"i",value:fp.appConfig.buildingOptions.showFill?1:0},showWindows:{type:"i",value:showWindows?1:0},fillRooves:{type:"i",value:fp.appConfig.buildingOptions.fillRooves?1:0}};var attributes={mixin:{type:"f",value:[]}};for(var i=0;i < shapeGeometry.vertices.length;i++) attributes.mixin.value[i] = Math.random() * 10;var shaderMaterial=new THREE.ShaderMaterial({uniforms:fp.ShaderUtils.lambertUniforms(this.uniforms),attributes:attributes,vertexShader:fp.ShaderUtils.lambertShaderVertex(fp.ShaderUtils.buildingVertexShaderParams(),fp.ShaderUtils.buildingVertexShaderMain()),fragmentShader:fp.ShaderUtils.lambertShaderFragment(fp.ShaderUtils.buildingFragmentShaderParams(),fp.ShaderUtils.buildingFragmentShaderMain()),lights:true,transparent:true});shaderMaterial.side = THREE.DoubleSide;shaderMaterial.wireframe = fp.appConfig.displayOptions.wireframeShow;this.mesh = new THREE.Mesh(shapeGeometry,shaderMaterial);this.mesh.castShadow = true;this.mesh.receiveShadow = true;this.mesh.children.forEach(function(b){b.castShadow = true;b.receiveShadow = true;});this.mesh.rotation.set(-Math.PI / 2,0,0);var height=fp.getHeight(this.highResMeshContainer.position.x,this.highResMeshContainer.position.z);this.mesh.position.set(this.highResMeshContainer.position.x,height,this.highResMeshContainer.position.z);this.mesh.updateMatrix();fp.buildingNetwork.networkMesh.add(this.mesh);this.highResMeshContainer.add(this.mesh.clone());}else {var dumbMaterial=new THREE.MeshBasicMaterial({color:"#ff0000"});var floorMesh=new THREE.Mesh(shapeGeometry,dumbMaterial);floorMesh.position.set(0,0,height);floorMesh.updateMatrix();var newGeom=this.mesh.geometry.clone();newGeom.mergeMesh(floorMesh);newGeom.verticesNeedUpdate = true;var newMesh=new THREE.Mesh(newGeom,this.mesh.material);newMesh.castShadow = true;newMesh.receiveShadow = true;newMesh.children.forEach(function(b){b.castShadow = true;b.receiveShadow = true;});newMesh.rotation.set(-Math.PI / 2,0,0);var newHeight=fp.getHeight(this.highResMeshContainer.position.x,this.highResMeshContainer.position.z);newMesh.position.set(this.highResMeshContainer.position.x,newHeight,this.highResMeshContainer.position.z);newMesh.updateMatrix();newMesh.geometry.verticesNeedUpdate = true;fp.buildingNetwork.networkMesh.remove(this.mesh);this.mesh = newMesh;fp.buildingNetwork.networkMesh.add(this.mesh);}}};this.canAddFloor = function(){return !this.destroying && this.levels < this.localMaxLevels && this.localWidth > 0 && this.localLength > 0;};this.updateBuilding = function(){if(this.canAddFloor()){this.counter++;if(this.counter % fp.appConfig.buildingOptions.riseRate === 0 || this.levels === 0){this.addFloor();}if(fp.appConfig.buildingOptions.falling){var y=-(this.levelHeight / (2 * fp.appConfig.buildingOptions.riseRate));this.yOffset += y;this.highResMeshContainer.translateY(y);this.lowResMeshContainer.translateY(y);}}else if(!this.destroying && fp.appConfig.buildingOptions.destroyOnComplete){this.destroying = true;}else if(this.destroying && this.levels > 0){this.counter++;if(this.counter % fp.appConfig.buildingOptions.riseRate === 0){this.removeFloor();}}else if(this.destroying && this.levels === 0 && fp.appConfig.buildingOptions.loopCreateDestroy){this.destroying = false;}if(fp.appConfig.buildingOptions.turning){this.highResMeshContainer.rotation.x += 0.001;this.highResMeshContainer.rotation.y += 0.01;this.lowResMeshContainer.rotation.x += 0.001;this.lowResMeshContainer.rotation.y += 0.01;this.lowResMesh.rotation.x += 0.001;this.lowResMesh.rotation.y += 0.01;}this.updateBuildingShader();};this.updateBuildingShader = function(){if(_.isUndefined(this.mesh) || _.isNull(this.mesh))return;var verticesPerLevel=this.mesh.geometry.vertices.length / this.levels;var shaderMaterial=this.mesh.material;for(var i=0;i < this.levels;i++) {var r=Math.random() * 10;var chance=fp.appConfig.buildingOptions.windowsFlickerRate;if(Math.random() < chance){var v=i * verticesPerLevel;for(var j=v;j < v + verticesPerLevel;j++) {shaderMaterial.attributes.mixin.value[j] = r;}}};shaderMaterial.attributes.mixin.needsUpdate = true;};this.updateSimpleBuilding = function(){if(this.levels > 1){if(!this.destroying)this.lowResMesh.scale.set(1,this.lowResMesh.scale.y * this.levels / (this.levels - 1),1);else this.lowResMesh.scale.set(1,this.lowResMesh.scale.y * (this.levels - 1) / this.levels,1);}else if(this.destroying)this.lowResMesh.scale.set(1,1,1);};this.translatePosition = function(x,y,z){this.lod.position.set(x,y,z);this.highResMeshContainer.position.set(x,y,z);this.lowResMeshContainer.position.set(x,y,z);};this.windowsOutline = function(value){if(value)this.highResMeshContainer.add(this.windowsOutlineContainer);else this.highResMeshContainer.remove(this.windowsOutlineContainer);};this.windowsFill = function(value){if(value)this.highResMeshContainer.add(this.windowsFillContainer);else this.highResMeshContainer.remove(this.windowsFillContainer);};this.init = function(form,dimensions,position,rotation){this.originPosition = position;var w=1 - jStat.exponential.cdf(Math.random() * 9,1);var d=1 - jStat.exponential.cdf(Math.random() * 9,1);var h=Math.floor(jStat.exponential.sample(fp.appConfig.buildingOptions.heightA) * fp.appConfig.buildingOptions.heightB);this.maxWidth = Math.floor(w * 9) + fp.appConfig.buildingOptions.heightB;this.maxDepth = Math.floor(d * 9) + 1;this.maxHeight = h + 1;this.bottomWindow = 1.0 - fp.appConfig.buildingOptions.windowsEndY / 100.0;this.topWindow = 1.0 - fp.appConfig.buildingOptions.windowsStartY / 100.0;this.windowWidth = fp.appConfig.buildingOptions.windowWidth;this.windowPercent = fp.appConfig.buildingOptions.windowPercent / 100.0;if(fp.appConfig.buildingOptions.windowsRandomise){var bottomWindowTmp=jStat.normal.inv(Math.random(),this.bottomWindow,0.1);var topWindowTmp=jStat.normal.inv(Math.random(),this.topWindow,0.1);var windowWidthTmp=jStat.normal.inv(Math.random(),this.windowWidth,0.1);var windowPercentTmp=jStat.normal.inv(Math.random(),this.windowPercent,0.1);var coerceValue=function coerceValue(num,min,max){if(num < min)return min;if(num > max)return max;return num;};this.bottomWindow = coerceValue(bottomWindowTmp,0,100);this.topWindow = coerceValue(topWindowTmp,0,100);this.windowWidth = coerceValue(windowWidthTmp,0,100);this.windowPercent = coerceValue(windowPercentTmp,0,100);}if(!_.isUndefined(form))this.buildingForm = form;if(!_.isUndefined(dimensions))this.initDimensions(dimensions);if(!_.isUndefined(position)){var posY=fp.getHeight(position.x,position.z) + fp.appConfig.buildingOptions.levelHeight;this.originPosition = new THREE.Vector3(position.x,posY,position.z);this.lod.position.set(position.x,posY,position.z);this.highResMeshContainer.position.set(position.x,posY,position.z);this.lowResMeshContainer.position.set(position.x,posY,position.z);}if(!_.isUndefined(rotation)){this.mesh.rotation.set(rotation.x,rotation.y,rotation.z);this.lod.rotation.set(rotation.x,rotation.y,rotation.z);this.highResMeshContainer.rotation.set(rotation.x,rotation.y,rotation.z);this.lowResMeshContainer.rotation.set(rotation.x,rotation.y,rotation.z);}this.mockMesh = this.shadedShapeMock();};this.mockMesh = null;this.mesh = null;this.lineMaterial = null;this.buildingMaterial = null;this.windowMaterial = null;this.lod = null;this.mesh = null;this.geometry = null;this.windowGeometry = null;this.windowMesh = null;this.windowsFillContainer = null;this.windowsOutlineContainer = null;this.lowResGeomtery = null;this.lowResMesh = null;this.highResMeshContainer = null;this.lowResMeshContainer = null;this.levels = 0;this.counter = 0;this.localMaxLevels = null;this.localWidth = null;this.localLength = null;this.yOffset = 0;this.uniforms = null;this.buildingForm = null;this.destroying = false;this.originPosition = null;this.init(form,dimensions,position,rotation);};this.Road = function(){this.mesh = null;this.position = null;this.setupRoad = function(_x,_y,_z){this.x = _x || 0;this.y = _y || 0;this.z = _z || 0;};this.shadedShape = function(points){};this.update = function(){};};this.AppState = {runSimulation:false,stepSimulation:false};this.AppConfig = function(){this.worldOptions = {maxLandSearchDepth:2,searchIncrement:2};this.agentOptions = {initialPopulation:100,initialExtent:10,maxExtent:100,initialX:50,initialY:50,randomAge:true,chanceToJoinNetwork:0.05,chanceToJoinNetworkWithHome:0.05,chanceToJoinNetworkWithBothHomes:0.05,chanceToFindPathToHome:0.00,chanceToFindPathToOtherAgentHome:0.00,initialCircle:true,noWater:true,noUphill:false,useStickman:true,visitHomeBuilding:0.02,visitOtherBuilding:0.002,establishLinks:false,size:40,terrainOffset:20,shuffle:false,initialSpeed:2,initialPerturbBy:0.05,movementRelativeToPatch:false,movementInPatch:1,movementStrictlyIntercardinal:false};this.buildingOptions = {create:true,maxNumber:250,heightA:2,heightB:10,roads:0.0,water:0.4,otherBuildings:0.9,distanceFromOtherBuildingsMin:800,distanceFromOtherBuildingsMax:1000,buildingHeight:0.1,buildingForm:"rectangle",spread:10,randomForm:false,rotateRandomly:false,rotateSetAngle:0,destroyOnComplete:false,loopCreateDestroy:false,turning:false,falling:false,riseRate:10,minHeight:10,maxHeight:70,minWidth:40,maxWidth:200,minLength:40,maxLength:200,maxLevels:0,width:0,length:0,levelHeight:40,useShader:true,useLevelOfDetail:true,highResDistance:1000,lowResDistance:7500,opacity:1.0,showFill:true,fillRooves:false,showLines:true,linewidth:1.0,showWindows:true,windowsRandomise:false,windowsFlickerRate:0.05,windowWidth:15,windowPercent:60,windowsStartY:40,windowsEndY:80,windowsLine:true,windowsFill:false,stagger:true,staggerAmount:40,taper:true,taperExponent:2,taperDistribution:1,detectBuildingCollisions:true,detectRoadCollisions:true};this.roadOptions = {create:true,maxNumber:200,roadWidth:20,roadDeviation:20,roadRadiusSegments:10,roadSegments:10,initialRadius:100,probability:1,lenMinimum:100,lenMaximum:2000,lenDistributionFactor:3,overlapThreshold:3,flattenAdjustment:0.025,flattenLift:20};this.displayOptions = {agentsShow:true,buildingsShow:true,roadsShow:true,waterShow:true,networkShow:false,networkCurve:true,networkCurvePoints:20,patchesShow:false,patchesUpdate:true,trailsShow:false,trailsShowAsLines:false,trailsUpdate:false,trailLength:10000,cursorShow:false,cursorShowCell:true,statsShow:true,hudShow:true,wireframeShow:false,dayShow:false,skyboxShow:true,chartShow:true,guiShow:true,guiShowControls:true,guiShowAgentFolder:true,guiShowBuildingsFolder:true,guiShowRoadsFolder:true,guiShowTerrainFolder:true,guiShowDisplayFolder:true,guiShowColorFolder:true,pathsShow:true,terrainShow:true,lightHemisphereShow:false,lightDirectionalShow:true,coloriseAgentsByHealth:false,firstPersonView:false,cameraOverride:false,cameraX:0,cameraY:200,cameraZ:800,maximiseView:true};this.terrainOptions = {renderAsSphere:true,loadHeights:true,gridExtent:8000,gridPoints:400,maxTerrainHeight:400,shaderUse:true,multiplier:1,mapIndex:0,patchSize:4,defaultHeight:10};this.colorOptions = {colorDayBackground:0x000000,colorDayRoad:0x474747,colorDayAgent:0x4747b3,colorDayNetwork:0x474747,colorDayTrail:0x474747,colorDayPath:0x474747,colorDayBuildingFill:0xb1abab,colorDayBuildingLine:0x222222,colorDayBuildingWindow:0x222222,colorNightBackground:0x636363,colorNightRoad:0x474747,colorNightAgent:0x47b347,colorNightNetwork:0x47b347,colorNightTrail:0x47b347,colorNightNetworPath:0x47b347,colorNightPath:0x47b347,colorNightBuildingFill:0x838383,colorNightBuildingLine:0x838383,colorNightBuildingWindow:0xffff8f,colorGraphPopulation:0x4747b3,colorGraphHealth:0xb34747,colorGraphPatchValues:0x47b347,colorLightHemisphereSky:0xbfbfbf,colorLightHemisphereGround:0xbfbfbf,colorLightHemisphereIntensity:1.0,colorLightDirectional:0xffffff,colorLightDirectionalIntensity:0.5,colorDayTerrainGroundLevel:0x969696,colorDayTerrainLowland1:0x2d5828,colorDayTerrainLowland2:0x6d915b,colorDayTerrainMidland1:0x89450e,colorDayTerrainMidland2:0x89450e,colorDayTerrainHighland:0x8c8c8c,colorNightTerrainGroundLevel:0x000000,colorNightTerrainLowland1:0x000000,colorNightTerrainLowland2:0x181818,colorNightTerrainMidland1:0x282828,colorNightTerrainMidland2:0x3a3a3a,colorNightTerrainHighland:0x4c4c4c,colorTerrainStop1:0.2,colorTerrainStop2:0.4,colorTerrainStop3:0.6,colorTerrainStop4:0.8,colorTerrainStop5:1.0,colorTerrainOpacity:1.0};this.buildingOptions.maxHeight = this.buildingOptions.minHeight > this.buildingOptions.maxHeight?this.buildingOptions.minHeight:this.buildingOptions.maxHeight;this.buildingOptions.maxWidth = this.buildingOptions.minWidth > this.buildingOptions.maxWidth?this.buildingOptions.minWidth:this.buildingOptions.maxWidth;this.buildingOptions.maxLength = this.buildingOptions.minLength > this.buildingOptions.maxLength?this.buildingOptions.minLength:this.buildingOptions.maxLength;this.buildingOptions.maxLevels = this.buildingOptions.minHeight + Math.floor(Math.random() * this.buildingOptions.maxHeight - this.buildingOptions.minHeight);this.buildingOptions.width = this.buildingOptions.minWidth + Math.floor(Math.random() * this.buildingOptions.maxWidth - this.buildingOptions.minWidth);this.buildingOptions.length = this.buildingOptions.minLength + Math.floor(Math.random() * this.buildingOptions.maxLength - this.buildingOptions.minLength);this.sunOptions = {turbidity:10,reileigh:2,mieCoefficient:0.005,mieDirectionalG:0.8,luminance:1,inclination:0.49,azimuth:0.25,sun:!true};this.Reset = function(){fp.scene.remove(fp.agentNetwork.particles);fp.agentNetwork.agents = [];fp.agentNetwork.agentParticleSystemAttributes = null;fp.buildingNetwork.networkJstsCache = [];fp.buildingNetwork.buildings = [];fp.buildingNetwork.buildingHash = {};fp.roadNetwork.indexValues = [];fp.roadNetwork.roads = {};fp.timescale.currentYear = fp.timescale.initialYear;fp.updateYear();fp.timescale.frameCounter = 0;if(fp.trailNetwork.trailMeshes)fp.trailNetwork.trailMeshes.forEach(function(trail){scene.remove(trail);});var len=fp.terrain.plane.geometry.attributes.position.array.length / 3,trailPoints=new Float32Array(len),patchPoints=new Float32Array(len);for(var i=0;i < len;i++) {trailPoints[i] = 0;patchPoints[i] = 0;}fp.terrain.plane.geometry.addAttribute("trail",new THREE.BufferAttribute(trailPoints,1));fp.terrain.plane.geometry.addAttribute("patch",new THREE.BufferAttribute(patchPoints,1));fp.terrain.plane.geometry.attributes.trail.needsUpdate = true;fp.terrain.plane.geometry.attributes.patch.needsUpdate = true;fp.trailNetwork.trails = {};fp.agentNetwork.networks.forEach(function(network){network.links = [];fp.scene.remove(network.networkMesh);});fp.scene.remove(fp.buildingNetwork.networkMesh);fp.scene.remove(fp.roadNetwork.networkMesh);fp.scene.remove(fp.pathNetwork.networkMesh);fp.scene.remove(fp.trailNetwork.globalTrailLine);fp.patchNetwork.initialisePatches();};this.Setup = function(){fp.appConfig.Reset();fp.agentNetwork.createInitialAgentPopulation();if(fp.appConfig.displayOptions.agentsShow)fp.scene.add(fp.agentNetwork.particles);fp.buildingNetwork.networkMesh = new THREE.Object3D();if(fp.appConfig.displayOptions.buildingsShow)fp.scene.add(fp.buildingNetwork.networkMesh);fp.roadNetwork.networkMesh = new THREE.Object3D();fp.roadNetwork.planeVertices = [];if(fp.appConfig.displayOptions.roadsShow)fp.scene.add(fp.roadNetwork.networkMesh);fp.pathNetwork.networkMesh = new THREE.Object3D();if(fp.appConfig.displayOptions.pathsShow)fp.scene.add(fp.pathNetwork.networkMesh);fp.trailNetwork.buildTrailNetwork(false);fp.sim.setup.call(fp.sim);};this.Run = function(){fp.AppState.runSimulation = !fp.AppState.runSimulation;fp.AppState.stepSimulation = false;if(!_.isUndefined(fp.chart)){if(fp.AppState.runSimulation)fp.chart.start();else fp.chart.stop();}};this.Step = function(){fp.AppState.runSimulation = fp.AppState.stepSimulation = true;};this.SpeedUp = function(){if(fp.timescale.framesToYear > fp.timescale.MIN_FRAMES_TO_YEAR)fp.timescale.framesToYear = Math.ceil(fp.timescale.framesToYear / 2);console.log("Speed: " + fp.timescale.framesToYear);};this.SlowDown = function(){if(fp.timescale.framesToYear < fp.timescale.MAX_FRAMES_TO_YEAR)fp.timescale.framesToYear *= 2;console.log("Speed: " + fp.timescale.framesToYear);};this.Snapshot = function(){var mimetype=mimetype || "image/png";var url=fp.renderer.domElement.toDataURL(mimetype);window.open(url,"name-" + Math.random());};this.FullScreen = function(){if(document.documentElement.requestFullscreen){document.documentElement.requestFullscreen();}else if(document.documentElement.mozRequestFullScreen){document.documentElement.mozRequestFullScreen();}else if(document.documentElement.webkitRequestFullscreen){document.documentElement.webkitRequestFullscreen();}else if(document.documentElement.msRequestFullscreen){document.documentElement.msRequestFullscreen();}};this.SwitchTerrain = function(){fp.appConfig.Reset();fp.terrain.terrainMapIndex = fp.terrain.terrainMapIndex == fp.TERRAIN_MAPS.length - 1?0:fp.terrain.terrainMapIndex + 1;fp.loadTerrain();};this.WrapTerrain = function(){fp.appConfig.waterShow = false;fp.terrain.wrappingState = 1;};this.UnwrapTerrain = function(){fp.terrain.wrappingState = -1;};};this.Chart = {setupChart:function setupChart(){var agentDiv=fp.appConfig.agentOptions.initialPopulation * 2;fp.chart = new SmoothieChart({maxValue:agentDiv,minValue:0.0});var agentPopulationSeries=new TimeSeries();var agentHealthSeries=new TimeSeries();var patchValuesSeries=new TimeSeries();setInterval(function(){if(fp.AppState.runSimulation){agentPopulationSeries.append(new Date().getTime(),fp.agentNetwork.agents.length);agentHealthSeries.append(new Date().getTime(),agentDiv * jStat(_.map(fp.agentNetwork.agents,function(agent){return agent.health;})).mean() / 100);patchValuesSeries.append(new Date().getTime(),agentDiv * fp.patchNetwork.patchMeanValue);}},500);var chartCanvas=document.createElement("canvas");chartCanvas.setAttribute("id","chartCanvas-" + fp.container.id);chartCanvas.setAttribute("width","400");chartCanvas.setAttribute("height","100");chartCanvas.setAttribute("style","z-index: 1; position: absolute; left: 0px; bottom: 0px  ");fp.container.insertBefore(chartCanvas,fp.container.firstChild);fp.chart.addTimeSeries(agentPopulationSeries,{fillStyle:"rgba( 0, 0, 255, 0.2 )",lineWidth:4});fp.chart.addTimeSeries(agentHealthSeries,{fillStyle:"rgba( 255, 0, 0, 0.2 )",lineWidth:4});fp.chart.addTimeSeries(patchValuesSeries,{fillStyle:"rgba( 0, 255, 0, 0.2 )",lineWidth:4});fp.chart.streamTo(chartCanvas,500);this.updateGraph();},updateGraph:function updateGraph(){$("#chartCanvas-" + fp.container.id).toggle(fp.appConfig.displayOptions.chartShow);}};this.doGUI = function(config){fp.appConfig = new fp.AppConfig();fp.gui = new dat.GUI({load:config});fp.gui.remember(fp.appConfig);fp.gui.remember(fp.appConfig.agentOptions);fp.gui.remember(fp.appConfig.buildingOptions);fp.gui.remember(fp.appConfig.roadOptions);fp.gui.remember(fp.appConfig.displayOptions);fp.gui.remember(fp.appConfig.colorOptions);fp.gui.remember(fp.appConfig.terrainOptions);fp.gui.add(fp.appConfig,"Setup");fp.gui.add(fp.appConfig,"Run");fp.gui.add(fp.appConfig,"Step");if(fp.appConfig.displayOptions.guiShowControls){var controlPanel=fp.gui.addFolder("More controls");controlPanel.add(fp.appConfig,"SpeedUp");controlPanel.add(fp.appConfig,"SlowDown");controlPanel.add(fp.appConfig,"Snapshot");controlPanel.add(fp.appConfig,"FullScreen");controlPanel.add(fp.appConfig,"SwitchTerrain");controlPanel.add(fp.appConfig,"WrapTerrain");controlPanel.add(fp.appConfig,"UnwrapTerrain");}if(fp.appConfig.displayOptions.guiShowAgentFolder){var agentsFolder=fp.gui.addFolder("Agent Options");agentsFolder.add(fp.appConfig.agentOptions,"initialPopulation",0,1000).step(1);agentsFolder.add(fp.appConfig.agentOptions,"initialExtent",1,100).step(1);agentsFolder.add(fp.appConfig.agentOptions,"maxExtent",1,100).step(1);agentsFolder.add(fp.appConfig.agentOptions,"initialX",0,100).step(1);agentsFolder.add(fp.appConfig.agentOptions,"initialY",0,100).step(1);agentsFolder.add(fp.appConfig.agentOptions,"randomAge");agentsFolder.add(fp.appConfig.agentOptions,"chanceToJoinNetwork",0.0,1.0).step(0.01);agentsFolder.add(fp.appConfig.agentOptions,"chanceToJoinNetworkWithHome",0.0,1.0).step(0.01);agentsFolder.add(fp.appConfig.agentOptions,"chanceToJoinNetworkWithBothHomes",0.0,1.0).step(0.01);agentsFolder.add(fp.appConfig.agentOptions,"chanceToFindPathToHome",0.0,1.0).step(0.01);agentsFolder.add(fp.appConfig.agentOptions,"chanceToFindPathToOtherAgentHome",0.0,1.0).step(0.01);agentsFolder.add(fp.appConfig.agentOptions,"initialCircle");agentsFolder.add(fp.appConfig.agentOptions,"noWater");agentsFolder.add(fp.appConfig.agentOptions,"noUphill");agentsFolder.add(fp.appConfig.agentOptions,"useStickman");agentsFolder.add(fp.appConfig.agentOptions,"visitHomeBuilding",0.0,1.0).step(0.001);agentsFolder.add(fp.appConfig.agentOptions,"visitOtherBuilding",0.0,1.0).step(0.001);agentsFolder.add(fp.appConfig.agentOptions,"establishLinks");agentsFolder.add(fp.appConfig.agentOptions,"shuffle");agentsFolder.add(fp.appConfig.agentOptions,"size",10,1000).step(10);agentsFolder.add(fp.appConfig.agentOptions,"terrainOffset",0,100).step(1);agentsFolder.add(fp.appConfig.agentOptions,"initialSpeed",1,10).step(1);agentsFolder.add(fp.appConfig.agentOptions,"initialPerturbBy",0,1).step(0.05);agentsFolder.add(fp.appConfig.agentOptions,"movementRelativeToPatch");agentsFolder.add(fp.appConfig.agentOptions,"movementInPatch",1,100).step(1);agentsFolder.add(fp.appConfig.agentOptions,"movementStrictlyIntercardinal");}if(fp.appConfig.displayOptions.guiShowBuildingsFolder){var buildingsFolder=fp.gui.addFolder("Building Options");buildingsFolder.add(fp.appConfig.buildingOptions,"create");buildingsFolder.add(fp.appConfig.buildingOptions,"maxNumber",1,100).step(1);buildingsFolder.add(fp.appConfig.buildingOptions,"detectBuildingCollisions");buildingsFolder.add(fp.appConfig.buildingOptions,"detectRoadCollisions");var forms=buildingsFolder.addFolder("Form");forms.add(fp.appConfig.buildingOptions,"buildingForm",fp.BUILDING_FORMS.names);forms.add(fp.appConfig.buildingOptions,"spread",1,100).step(1);forms.add(fp.appConfig.buildingOptions,"randomForm");forms.add(fp.appConfig.buildingOptions,"rotateRandomly");forms.add(fp.appConfig.buildingOptions,"rotateSetAngle",0,360).step(1);var dimensions=buildingsFolder.addFolder("Dimensions");dimensions.add(fp.appConfig.buildingOptions,"minHeight",1,100).step(1);dimensions.add(fp.appConfig.buildingOptions,"maxHeight",2,200).step(1);dimensions.add(fp.appConfig.buildingOptions,"heightA",0.1,10.0).step(0.1);dimensions.add(fp.appConfig.buildingOptions,"heightB",1,100).step(1);dimensions.add(fp.appConfig.buildingOptions,"riseRate",1,100).step(1);dimensions.add(fp.appConfig.buildingOptions,"levelHeight",10,100).step(1);dimensions.add(fp.appConfig.buildingOptions,"minWidth",1,200).step(1);dimensions.add(fp.appConfig.buildingOptions,"maxWidth",41,400).step(1);dimensions.add(fp.appConfig.buildingOptions,"minLength",1,200).step(1);dimensions.add(fp.appConfig.buildingOptions,"maxLength",41,400).step(1);var influences=buildingsFolder.addFolder("Influences");influences.add(fp.appConfig.buildingOptions,"roads",0.0,1.0).step(0.1);influences.add(fp.appConfig.buildingOptions,"water",0.0,1.0).step(0.1);influences.add(fp.appConfig.buildingOptions,"otherBuildings",0.0,1.0).step(0.1);influences.add(fp.appConfig.buildingOptions,"distanceFromOtherBuildingsMin",0,10000).step(100);influences.add(fp.appConfig.buildingOptions,"distanceFromOtherBuildingsMax",0,10000).step(100);influences.add(fp.appConfig.buildingOptions,"buildingHeight",0.0,1.0).step(0.1);var view=buildingsFolder.addFolder("Appearance");view.add(fp.appConfig.buildingOptions,"useShader");view.add(fp.appConfig.buildingOptions,"useLevelOfDetail");view.add(fp.appConfig.buildingOptions,"lowResDistance",2000,20000).step(1000);view.add(fp.appConfig.buildingOptions,"highResDistance",100,2000).step(100);view.add(fp.appConfig.buildingOptions,"opacity",0.0,1.0).step(0.01);var fill=view.addFolder("Fill");fill.add(fp.appConfig.buildingOptions,"showFill");fill.add(fp.appConfig.buildingOptions,"fillRooves");var line=view.addFolder("Line");line.add(fp.appConfig.buildingOptions,"showLines");line.add(fp.appConfig.buildingOptions,"linewidth",0.1,8).step(0.1);var windows=view.addFolder("Window");var showWindowsOptions=windows.add(fp.appConfig.buildingOptions,"showWindows");showWindowsOptions.onChange(function(value){fp.buildingNetwork.buildings.forEach(function(b){b.uniforms.showWindows.value = value?1:0;});});windows.add(fp.appConfig.buildingOptions,"windowsRandomise");windows.add(fp.appConfig.buildingOptions,"windowsFlickerRate",0,1).step(0.01);windows.add(fp.appConfig.buildingOptions,"windowWidth",1,100).step(1);windows.add(fp.appConfig.buildingOptions,"windowPercent",1,100).step(1);windows.add(fp.appConfig.buildingOptions,"windowsStartY",1,100).step(1);windows.add(fp.appConfig.buildingOptions,"windowsEndY",1,100).step(1);var stagger=buildingsFolder.addFolder("Stagger");stagger.add(fp.appConfig.buildingOptions,"stagger");stagger.add(fp.appConfig.buildingOptions,"staggerAmount",1,100);var taper=buildingsFolder.addFolder("Taper");taper.add(fp.appConfig.buildingOptions,"taper");taper.add(fp.appConfig.buildingOptions,"taperExponent",1,10).step(1);taper.add(fp.appConfig.buildingOptions,"taperDistribution",0.1,5);var animation=buildingsFolder.addFolder("Animation");animation.add(fp.appConfig.buildingOptions,"destroyOnComplete");animation.add(fp.appConfig.buildingOptions,"loopCreateDestroy");animation.add(fp.appConfig.buildingOptions,"turning");animation.add(fp.appConfig.buildingOptions,"falling");}if(fp.appConfig.displayOptions.guiShowRoadsFolder){var roadsFolder=fp.gui.addFolder("Road Options");roadsFolder.add(fp.appConfig.roadOptions,"create");roadsFolder.add(fp.appConfig.roadOptions,"maxNumber",1,100).step(1);roadsFolder.add(fp.appConfig.roadOptions,"roadWidth",5,50).step(5);roadsFolder.add(fp.appConfig.roadOptions,"roadDeviation",0,50).step(1);roadsFolder.add(fp.appConfig.roadOptions,"roadRadiusSegments",2,20).step(1);roadsFolder.add(fp.appConfig.roadOptions,"roadSegments",1,20).step(1);roadsFolder.add(fp.appConfig.roadOptions,"initialRadius",0,1000).step(100);roadsFolder.add(fp.appConfig.roadOptions,"probability",50,1000).step(50);roadsFolder.add(fp.appConfig.roadOptions,"lenMinimum",0,2000).step(100);roadsFolder.add(fp.appConfig.roadOptions,"lenMaximum",100,2000).step(100);roadsFolder.add(fp.appConfig.roadOptions,"lenDistributionFactor",1,10).step(1);roadsFolder.add(fp.appConfig.roadOptions,"overlapThreshold",1,100).step(1);roadsFolder.add(fp.appConfig.roadOptions,"flattenAdjustment",0.025,1.0).step(0.025);roadsFolder.add(fp.appConfig.roadOptions,"flattenLift",0,40).step(1);}if(fp.appConfig.displayOptions.guiShowTerrainFolder){var terrainFolder=fp.gui.addFolder("Terrain Options");terrainFolder.add(fp.appConfig.terrainOptions,"loadHeights").onFinishChange(fp.loadTerrain);terrainFolder.add(fp.appConfig.terrainOptions,"gridExtent",1000,20000).step(1000).onFinishChange(fp.loadTerrain);terrainFolder.add(fp.appConfig.terrainOptions,"gridPoints",2,2000).step(100).onFinishChange(fp.loadTerrain);terrainFolder.add(fp.appConfig.terrainOptions,"maxTerrainHeight",100,2000).step(100).onFinishChange(fp.loadTerrain);terrainFolder.add(fp.appConfig.terrainOptions,"shaderUse").onFinishChange(fp.loadTerrain);terrainFolder.add(fp.appConfig.terrainOptions,"multiplier",0.1,10).step(0.1).onFinishChange(fp.loadTerrain);terrainFolder.add(fp.appConfig.terrainOptions,"mapIndex",0,1).step(1).onFinishChange(fp.loadTerrain);terrainFolder.add(fp.appConfig.terrainOptions,"patchSize",1,100).step(1).onFinishChange(fp.loadTerrain);}if(fp.appConfig.displayOptions.guiShowDisplayFolder){var displayFolder=fp.gui.addFolder("Display Options");displayFolder.add(fp.appConfig.displayOptions,"agentsShow").onFinishChange(fp.toggleAgentState);displayFolder.add(fp.appConfig.displayOptions,"buildingsShow").onFinishChange(fp.toggleBuildingState);displayFolder.add(fp.appConfig.displayOptions,"roadsShow").onFinishChange(fp.toggleRoadState);displayFolder.add(fp.appConfig.displayOptions,"waterShow").onFinishChange(fp.toggleWaterState);displayFolder.add(fp.appConfig.displayOptions,"networkShow").onFinishChange(fp.toggleAgentNetwork);displayFolder.add(fp.appConfig.displayOptions,"networkCurve");displayFolder.add(fp.appConfig.displayOptions,"networkCurvePoints",4,20).step(1);displayFolder.add(fp.appConfig.displayOptions,"patchesUpdate");displayFolder.add(fp.appConfig.displayOptions,"patchesShow").onFinishChange(fp.togglePatchesState);displayFolder.add(fp.appConfig.displayOptions,"trailsShow").onFinishChange(fp.toggleTrailState);displayFolder.add(fp.appConfig.displayOptions,"trailsUpdate").onFinishChange(fp.toggleTrailState);displayFolder.add(fp.appConfig.displayOptions,"trailsShowAsLines").onFinishChange(fp.toggleTrailState);displayFolder.add(fp.appConfig.displayOptions,"trailLength",1,10000).step(1);displayFolder.add(fp.appConfig.displayOptions,"cursorShow").onFinishChange(fp.removeCursor);displayFolder.add(fp.appConfig.displayOptions,"statsShow").onFinishChange(fp.toggleStatsState);displayFolder.add(fp.appConfig.displayOptions,"hudShow").onFinishChange(fp.toggleHUDState);displayFolder.add(fp.appConfig.displayOptions,"wireframeShow").onFinishChange(fp.toggleWireframeState);displayFolder.add(fp.appConfig.displayOptions,"dayShow").onFinishChange(fp.toggleDayNight);displayFolder.add(fp.appConfig.displayOptions,"skyboxShow").onFinishChange(fp.toggleDayNight);displayFolder.add(fp.appConfig.displayOptions,"chartShow").onFinishChange(fp.updateGraph);displayFolder.add(fp.appConfig.displayOptions,"pathsShow").onFinishChange(fp.togglePathsState);displayFolder.add(fp.appConfig.displayOptions,"terrainShow").onFinishChange(fp.toggleTerrainPlane);displayFolder.add(fp.appConfig.displayOptions,"lightHemisphereShow").onFinishChange(fp.toggleLights);displayFolder.add(fp.appConfig.displayOptions,"lightDirectionalShow").onFinishChange(fp.toggleLights);displayFolder.add(fp.appConfig.displayOptions,"coloriseAgentsByHealth");displayFolder.add(fp.appConfig.displayOptions,"firstPersonView").onFinishChange(fp.resetControls);displayFolder.add(fp.appConfig.displayOptions,"cameraOverride").onFinishChange(fp.resetControls);displayFolder.add(fp.appConfig.displayOptions,"cameraX",0,5000).onFinishChange(fp.resetControls);displayFolder.add(fp.appConfig.displayOptions,"cameraY",0,5000).onFinishChange(fp.resetControls);displayFolder.add(fp.appConfig.displayOptions,"cameraZ",0,5000).onFinishChange(fp.resetControls);displayFolder.add(fp.appConfig.displayOptions,"maximiseView");displayFolder.add(fp.appConfig.displayOptions,"guiShow");var folders=displayFolder.addFolder("Folder Options");folders.add(fp.appConfig.displayOptions,"guiShowControls");folders.add(fp.appConfig.displayOptions,"guiShowAgentFolder");folders.add(fp.appConfig.displayOptions,"guiShowBuildingsFolder");folders.add(fp.appConfig.displayOptions,"guiShowRoadsFolder");folders.add(fp.appConfig.displayOptions,"guiShowTerrainFolder");folders.add(fp.appConfig.displayOptions,"guiShowDisplayFolder");folders.add(fp.appConfig.displayOptions,"guiShowColorFolder");}if(fp.appConfig.displayOptions.guiShowColorFolder){var colorFolder=fp.gui.addFolder("Color Options");var colorTerrainFolder=colorFolder.addFolder("Terrain Colors");colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorDayTerrainGroundLevel").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorNightTerrainGroundLevel").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorDayTerrainLowland1").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorNightTerrainLowland1").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorDayTerrainLowland2").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorNightTerrainLowland2").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorDayTerrainMidland1").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorNightTerrainMidland1").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorDayTerrainMidland2").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorNightTerrainMidland2").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorDayTerrainHighland").onChange(fp.loadTerrain);colorTerrainFolder.addColor(fp.appConfig.colorOptions,"colorNightTerrainHighland").onChange(fp.loadTerrain);colorTerrainFolder.add(fp.appConfig.colorOptions,"colorTerrainStop1",0.0,1.0).step(0.01).onChange(fp.loadTerrain);colorTerrainFolder.add(fp.appConfig.colorOptions,"colorTerrainStop2",0.0,1.0).step(0.01).onChange(fp.loadTerrain);colorTerrainFolder.add(fp.appConfig.colorOptions,"colorTerrainStop3",0.0,1.0).step(0.01).onChange(fp.loadTerrain);colorTerrainFolder.add(fp.appConfig.colorOptions,"colorTerrainStop4",0.0,1.0).step(0.01).onChange(fp.loadTerrain);colorTerrainFolder.add(fp.appConfig.colorOptions,"colorTerrainStop5",0.0,1.0).step(0.01).onChange(fp.loadTerrain);colorTerrainFolder.add(fp.appConfig.colorOptions,"colorTerrainOpacity",0.0,1.0).step(0.01).onChange(fp.loadTerrain);var colorBuildingFolder=colorFolder.addFolder("Building Colors");colorBuildingFolder.addColor(fp.appConfig.colorOptions,"colorDayBuildingFill");colorBuildingFolder.addColor(fp.appConfig.colorOptions,"colorNightBuildingFill");colorBuildingFolder.addColor(fp.appConfig.colorOptions,"colorDayBuildingLine");colorBuildingFolder.addColor(fp.appConfig.colorOptions,"colorNightBuildingLine");colorBuildingFolder.addColor(fp.appConfig.colorOptions,"colorDayBuildingWindow");colorBuildingFolder.addColor(fp.appConfig.colorOptions,"colorNightBuildingWindow");var colorGraphFolder=colorFolder.addFolder("Graph Colors");colorGraphFolder.addColor(fp.appConfig.colorOptions,"colorGraphPopulation").onChange(fp.updateChartColors);colorGraphFolder.addColor(fp.appConfig.colorOptions,"colorGraphHealth").onChange(fp.updateChartColors);colorGraphFolder.addColor(fp.appConfig.colorOptions,"colorGraphPatchValues").onChange(fp.updateChartColors);var colorLightingFolder=colorFolder.addFolder("Lighting Colors");colorLightingFolder.addColor(fp.appConfig.colorOptions,"colorLightHemisphereSky").onChange(fp.updateLighting);colorLightingFolder.addColor(fp.appConfig.colorOptions,"colorLightHemisphereGround").onChange(fp.updateLighting);colorLightingFolder.add(fp.appConfig.colorOptions,"colorLightHemisphereIntensity",0,1).step(0.01).onChange(fp.updateLighting);colorLightingFolder.addColor(fp.appConfig.colorOptions,"colorLightDirectional").onChange(fp.updateLighting);colorLightingFolder.add(fp.appConfig.colorOptions,"colorLightDirectionalIntensity",0,1).step(0.01).onChange(fp.updateLighting);var colorOtherFolder=colorFolder.addFolder("Other Colors");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorDayBackground");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorNightBackground");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorDayRoad");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorNightRoad");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorDayAgent");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorNightAgent");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorDayNetwork");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorNightNetwork");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorDayNetwork");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorNightNetwork");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorDayTrail");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorNightTrail");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorDayPath");colorOtherFolder.addColor(fp.appConfig.colorOptions,"colorNightPath");}if(!fp.appConfig.displayOptions.guiShow){fp.gui.destroy();return;}};this.buildColorVector = function(color){var bc,r,g,b;if(!isNaN(parseInt(color))){b = color % 256;g = (color - b) / 256 % 256;r = (color - g * 256 - b) / (256 * 256) % 256;}else {bc = parseCSSColor(color);r = bc[0];g = bc[1];b = bc[2];}return new THREE.Vector3(r / 255.0,g / 255.0,b / 255.0);};this.buildColorInteger = function(r,g,b){return r * 256 * 256 + g * 256 + b;};this.getOffset = function(currentLevel,len){var initOffset=currentLevel > 0?len * 2:0;var offset=initOffset + currentLevel * len * 4;return offset;};this.onWindowResize = function(){if(fp.appConfig.displayOptions.maximiseView){fp.camera.aspect = window.innerWidth / window.innerHeight;fp.camera.updateProjectionMatrix();fp.renderer.setSize(window.innerWidth,window.innerHeight);}else {var width=$("#container1").width(),height=$("#container1").height();fp.camera.aspect = width / height;fp.camera.updateProjectionMatrix();fp.renderer.setSize(width,height);}};this.updateChartColors = function(){if(fp.chart.seriesSet.length == 3){var colorPop="#" + new THREE.Color(fp.appConfig.colorOptions.colorGraphPopulation).getHexString(),colorHealth="#" + new THREE.Color(fp.appConfig.colorOptions.colorGraphHealth).getHexString(),colorPatches="#" + new THREE.Color(fp.appConfig.colorOptions.colorGraphPatchValues).getHexString();_.extend(fp.chart.seriesSet[0].options,{strokeStyle:colorPop});_.extend(fp.chart.seriesSet[1].options,{strokeStyle:colorHealth});_.extend(fp.chart.seriesSet[2].options,{strokeStyle:colorPatches});}};this.mostVisited = function(){return _.chain(trailNetwork.trails).pairs().sortBy(function(a){return a[1];}).last(100).value();};this.vertexCount = function(obj){var count=0;if(!_.isUndefined(obj.geometry)){if(!_.isUndefined(obj.geometry.vertices))count += obj.geometry.vertices.length;else if(!_.isUndefined(obj.geometry.attributes.position))count += obj.geometry.attributes.position.array.length / 3;}if(!_.isUndefined(obj.children)){obj.children.forEach(function(child){count += this.vertexCount(child);});}return count;};this.setupSimObjects = function(){fp.terrain = new fp.Terrain();fp.terrain.gridExtent = fp.appConfig.terrainOptions.gridExtent;fp.agentNetwork = new fp.AgentNetwork();fp.buildingNetwork = new fp.BuildingNetwork();fp.roadNetwork = new fp.RoadNetwork();fp.pathNetwork = new fp.PathNetwork();fp.trailNetwork = new fp.TrailNetwork();fp.patchNetwork = new fp.PatchNetwork();fp.timescale = new fp.Timescale();fp.cursor = new fp.Cursor();};this.setupCamera = function(){fp.camera = new THREE.PerspectiveCamera(75,window.innerWidth / window.innerHeight,1,10000000);if(fp.appConfig.displayOptions.cameraOverride){fp.camera.position.x = fp.appConfig.displayOptions.cameraX;fp.camera.position.y = fp.appConfig.displayOptions.cameraY;fp.camera.position.z = fp.appConfig.displayOptions.cameraZ;}else if(fp.appConfig.displayOptions.firstPersonView){fp.camera.position.x = 0;fp.camera.position.y = 50 * fp.appConfig.terrainOptions.multiplier;fp.camera.position.z = 0;}else {fp.camera.position.x = 0;fp.camera.position.y = 200 * fp.appConfig.terrainOptions.multiplier;fp.camera.position.z = 800 * fp.appConfig.terrainOptions.multiplier;}};this.setupControls = function(){if(fp.appConfig.displayOptions.firstPersonView){fp.controls = new THREE.PointerLockControls(fp.camera);fp.scene.add(fp.controls.getObject());fp.controls.enabled = true;fp.container.requestPointerLock();}else {fp.controls = new THREE.TrackballControls(fp.camera,fp.container);fp.controls.rotateSpeed = 0.15;fp.controls.zoomSpeed = 0.6;fp.controls.panSpeed = 0.3;fp.controls.noRotate = false;fp.controls.noZoom = false;fp.controls.noPan = false;fp.controls.noRoll = true;fp.controls.minDistance = 250.0;fp.controls.maxDistance = 10000.0;}};this.resetControls = function(){fp.setupCamera();fp.setupControls();fp.setupWater();};this.setupRenderer = function(){fp.renderer = new THREE.WebGLRenderer({alpha:true,antialias:true,preserveDrawingBuffer:true});fp.renderer.gammaInput = true;fp.renderer.gammaOutput = true;fp.renderer.shadowMapEnabled = true;fp.renderer.shadowMapType = THREE.PCFSoftShadowMap;fp.renderer.shadowMapCullFace = THREE.CullFaceBack;fp.renderer.setClearColor(fp.appConfig.colorOptions.colorNightBackground,1);fp.onWindowResize();fp.container.appendChild(fp.renderer.domElement);fp.renderer.domElement.style.zIndex = 2;fp.renderer.domElement.addEventListener("mousemove",fp.onMouseMove);fp.renderer.domElement.addEventListener("mouseup",fp.onMouseUp);};this.setupLighting = function(){fp.scene.remove(fp.lightHemisphere);fp.scene.remove(fp.lightDirectional);fp.lightHemisphere = new THREE.HemisphereLight(new THREE.Color(fp.appConfig.colorOptions.colorLightHemisphereSky),new THREE.Color(fp.appConfig.colorOptions.colorLightHemisphereGround),new THREE.Color(fp.appConfig.colorOptions.colorLightHemisphereIntensity));fp.lightHemisphere.position.set(0,1000,0);if(fp.appConfig.displayOptions.lightHemisphereShow)fp.scene.add(fp.lightHemisphere);fp.lightDirectional = new THREE.DirectionalLight(new THREE.Color(fp.appConfig.colorOptions.colorLightDirectional),fp.appConfig.colorOptions.colorLightDirectionalIntensity);fp.lightDirectional.position.set(-40000,40000,-40000);fp.lightDirectional.shadowDarkness = Math.pow(fp.appConfig.colorOptions.colorLightDirectionalIntensity,2);fp.lightDirectional.castShadow = true;fp.lightDirectional.shadowCameraNear = 250;fp.lightDirectional.shadowCameraFar = 80000;var d=fp.terrain.gridExtent * fp.appConfig.terrainOptions.multiplier;fp.lightDirectional.shadowMapWidth = d;fp.lightDirectional.shadowMapHeight = d;fp.lightDirectional.shadowCameraLeft = -d;fp.lightDirectional.shadowCameraRight = d;fp.lightDirectional.shadowCameraTop = d;fp.lightDirectional.shadowCameraBottom = -d;fp.lightDirectional.shadowBias = -0.0001;if(fp.appConfig.displayOptions.lightDirectionalShow)fp.scene.add(fp.lightDirectional);};this.updateLighting = function(){if(_.isNull(fp.lightHemisphere) || _.isNull(fp.colorLightDirectional))return null;fp.lightHemisphere.color = new THREE.Color(fp.appConfig.colorOptions.colorLightHemisphereSky);fp.lightHemisphere.groundColor = new THREE.Color(fp.appConfig.colorOptions.colorLightHemisphereGround);fp.lightHemisphere.intensity = fp.appConfig.colorOptions.colorLightHemisphereIntensity;fp.lightDirectional.color = new THREE.Color(fp.appConfig.colorOptions.colorLightDirectional);fp.lightDirectional.intensity = fp.appConfig.colorOptions.colorLightDirectionalIntensity;fp.lightDirectional.shadowDarkness = Math.pow(fp.appConfig.colorOptions.colorLightDirectionalIntensity,2);};this.setupWater = function(){var parameters={width:2000,height:2000,widthSegments:250,heightSegments:250,depth:1500,param:4,filterparam:1};var waterNormals=new ( new THREE.TextureLoader() ).load("../textures/waternormals.jpg");waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping;fp.water = new THREE.Water(fp.renderer,fp.camera,fp.scene,{textureWidth:512,textureHeight:512,waterNormals:waterNormals,alpha:1.0,sunColor:0xffffff,waterColor:0x001e0f,distortionScale:50.0});if(!_.isUndefined(fp.waterMesh))fp.scene.remove(fp.waterMesh);fp.waterMesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(parameters.width * 500,parameters.height * 500,50,50),fp.water.material);fp.waterMesh.add(fp.water);fp.waterMesh.rotation.x = -Math.PI * 0.5;fp.waterMesh.position.y = -10;if(fp.appConfig.displayOptions.waterShow)fp.scene.add(fp.waterMesh);};this.setupSky = function(){var cubeMap=new THREE.CubeTexture([]);cubeMap.format = THREE.RGBFormat;cubeMap.flipY = false;var loader=new THREE.ImageLoader();var skies=[["../textures/skyboxsun25degtest.png",1024,0],["../textures/skyboxsun5deg.png",1024,0],["../textures/skyboxsun5deg2.png",1024,0],["../textures/skyboxsun45deg.png",1024,0]];var skyI=Math.floor(Math.random() * skies.length);loader.load(skies[skyI][0],function(image){var getSide=function getSide(x,y){var size=skies[skyI][1];var canvas=document.createElement("canvas");canvas.width = size;canvas.height = size;var context=canvas.getContext("2d");context.drawImage(image,-x * size,-y * size);return canvas;};cubeMap.images[0] = getSide(2,1);cubeMap.images[1] = getSide(0,1);cubeMap.images[2] = getSide(1,0);cubeMap.images[3] = getSide(1,2);cubeMap.images[4] = getSide(1,1);cubeMap.images[5] = getSide(3,1);cubeMap.needsUpdate = true;});var cubeShader=THREE.ShaderLib["cube"];cubeShader.uniforms["tCube"].value = cubeMap;var skyBoxMaterial=new THREE.ShaderMaterial({fragmentShader:cubeShader.fragmentShader,vertexShader:cubeShader.vertexShader,uniforms:cubeShader.uniforms,depthWrite:false,side:THREE.BackSide});fp.skyBox = new THREE.Mesh(new THREE.BoxGeometry(1000000,1000000,1000000),skyBoxMaterial);fp.skyBox.position.set(0,skies[skyI][2],0);if(fp.appConfig.displayOptions.skyboxShow)fp.scene.add(fp.skyBox);};this.setOutputHUD = function(){$("#yearValue").html(fp.timescale.currentYear);$("#populationValue").html(fp.agentNetwork.agents.length);};this.setupGUI = function(config){if(!_.isUndefined(config)){fp.doGUI(config);}else if(!_.isUndefined($) && !_.isUndefined($.urlParam)){var recipe=$.urlParam("recipe"),recipeData=$.urlParam("recipeData");if(!_.isUndefined(recipeData)){fp.doGUI($.parseJSON(decodeURIComponent(recipeData)));}else if(!_.isUndefined(recipe)){$.getJSON("/recipes/" + recipe + ".json",function(data){fp.doGUI(data);});}else fp.doGUI();}else fp.doGUI();};this.init = function(config,sim,callback){fp.container = $("#container")[0] || config.container;fp.scene = new THREE.Scene();fp.sim = sim || fp.simDefault();fp.setupGUI(config);fp.setupSimObjects();fp.setupCamera();fp.setupControls();fp.setupRenderer();fp.setupLighting();fp.setupWater();fp.setupSky();fp.setOutputHUD();fp.Chart.setupChart();fp.toggleStatsState();window.addEventListener("resize",fp.onWindowResize,false);fp.loadTerrain(callback);};this.animate = function(){if(fp.AppState.halt == true)return;fp.patchNetwork.updatePatchAgents();if(fp.AppState.runSimulation)fp.sim.tick.call(fp.sim);fp.agentNetwork.updateAgentNetwork();fp.buildingNetwork.updateBuildings();fp.patchNetwork.updatePatchValues();fp.trailNetwork.updateTrails();fp.terrain.updateTerrain();fp.pathNetwork.updatePath();fp.updateYear();fp.updateSimState();fp.updateGraph();fp.updateWater();fp.updateStats();fp.updateControls();fp.updateCamera();fp.updateKeyboard();requestAnimationFrame(fp.animate);fp.renderer.render(fp.scene,fp.camera);};this.simDefault = function(){return {counter:0,setup:function setup(){},tick:function tick(){}};};this.updateSimState = function(){if(fp.AppState.stepSimulation)fp.AppState.runSimulation = false;};this.updateWater = function(){if(!_.isUndefined(fp.water) && !_.isUndefined(fp.water.material.uniforms.time)){fp.water.material.uniforms.time.value += 1.0 / 60.0;fp.water.render();}};this.updateControls = function(){if(!fp.appConfig.displayOptions.cursorShow){fp.controls.update(fp.clock.getDelta());if(!_.isUndefined(fp.controls.getObject)){var obj=fp.controls.getObject();var height=fp.getHeight(obj.position.x,obj.position.z);if(height != obj.position.y){obj.position.y = height;}}}};this.updateGraph = function(){if(fp.chart.seriesSet.length == 3 && fp.chart.options.maxValue <= fp.agentNetwork.agents.length){fp.chart.options.maxValue *= 2;}};this.updateStats = function(){if(fp.appConfig.displayOptions.statsShow)fp.stats.update();};this.updateCamera = function(){fp.scene.traverse(function(object){if(object instanceof THREE.LOD)object.update(fp.camera);});fp.scene.updateMatrixWorld();};this.endSim = function(){fp.AppState.runSimulation = false;fp.appConfig.displayOptions.buildingsShow = false;fp.appConfig.displayOptions.patchesUpdate = false;};this.updateYear = function(){if(!fp.AppState.runSimulation)return;fp.timescale.frameCounter++;if(fp.timescale.frameCounter % fp.timescale.framesToYear === 0){if(!fp.timescale.terminate || fp.timescale.currentYear < fp.timescale.endYear){fp.timescale.currentYear++;fp.setOutputHUD();}else fp.endSim();}};this.getPatchIndex = function(x,y){var multiplier=fp.appConfig.terrainOptions.multiplier;x = Math.floor(x / multiplier);y = Math.floor(y / multiplier);var dim=(fp.terrain.gridPoints - 1) / fp.patchNetwork.patchSize;var halfGrid=fp.terrain.gridExtent / 2;var pX=Math.floor(dim * (x + halfGrid) / fp.terrain.gridExtent);var pY=Math.floor(dim * (y + halfGrid) / fp.terrain.gridExtent);var index=Math.floor(pY * dim + pX);index = index < 0?0:index;index = index >= fp.patchNetwork.patchValues.length?fp.patchNetwork.patchValues.length - 1:index;return index;};this.getIndex = function(x,y){var multiplier=fp.appConfig.terrainOptions.multiplier;x = Math.floor(x / multiplier);y = Math.floor(y / multiplier);var maxExtent=fp.appConfig.agentOptions.maxExtent / 100 * fp.terrain.halfExtent;var xRel=Math.floor(x) + fp.terrain.halfExtent;var yRel=Math.floor(y) + fp.terrain.halfExtent;if(xRel < fp.terrain.halfExtent - maxExtent || yRel < fp.terrain.halfExtent - maxExtent || xRel > fp.terrain.halfExtent + maxExtent || yRel > fp.terrain.halfExtent + maxExtent)return -1;var halfGrid=fp.terrain.gridExtent / 2;var gridRatio=fp.terrain.gridExtent / fp.terrain.gridPoints;y += gridRatio / 2;var xLoc=Math.floor((Math.round(x) + halfGrid) / gridRatio);var yLoc=Math.floor((Math.round(y) + halfGrid) / gridRatio);return Math.floor(fp.terrain.gridPoints * yLoc + xLoc);};this.getHeight = function(x,y){return fp.terrain.getHeightForIndex(fp.getIndex(x,y));};this.speedOfSim = function(){return true;};this.likelihoodOfGrowth = function(){return 1 - fp.buildingNetwork.speedOfConstruction * fp.speedOfSim();};this.checkProximityOfRoads = function(index){var cells=fp.surroundingCells(index);for(var i=0;i < cells.length;i++) {var cell=cells[i];if(fp.roadNetwork.indexValues.indexOf(fp.getIndex(cell.x,cell.y)) > -1)return 1.0;}return 0.0;};this.checkProximityOfWater = function(index){var seaLevelNeighbours=0,totalNeighbours=0;fp.surroundingCells(index).forEach(function(cell){if(cell.z <= 0)seaLevelNeighbours++;totalNeighbours++;});return seaLevelNeighbours / totalNeighbours;};this.checkProximityOfBuildings = function(index,threshold){var buildingNeighbours=0,totalNeighbours=0;var surroundingCells=fp.surroundingCells(index);surroundingCells.forEach(function(cell){if(!_.isUndefined(fp.buildingNetwork.buildingHash[fp.getIndex(cell.x,cell.y)]))buildingNeighbours++;totalNeighbours++;});var testValue=buildingNeighbours / totalNeighbours;var chance=Math.pow(testValue,Math.random());return chance > 1 - threshold;};this.checkNearestNeighbour = function(index,min,max){var coords=fp.terrain.getCoordinatesForIndex(index);if(_.isNull(coords))return false;var x=coords[0],z=coords[1];var nnDistance=this.nearestNeighbouringBuildings(x,z);return min <= nnDistance && nnDistance <= max;};this.nearestNeighbouringBuildings = function(x,z){var minSquaredDistance=-1;for(var i=0;i < fp.buildingNetwork.buildings.length;i++) {var building=fp.buildingNetwork.buildings[i];var bx=building.lod.position.x,bz=building.lod.position.z;var squaredDistance=Math.pow(bx - x,2) + Math.pow(bz - z,2);if(minSquaredDistance == -1 || squaredDistance < minSquaredDistance)minSquaredDistance = squaredDistance;};return Math.sqrt(minSquaredDistance);};this.checkProximiteBuildingHeight = function(index){if(fp.buildingNetwork.buildings.length === 0)return 0;var surrounding=fp.surroundingCells(index);var buildingNeighbours=0,totalNeighbours=0;var allHeights=jStat(_.map(fp.buildingNetwork.buildings,function(building){return building.maxHeight;}));var meanHeights=allHeights.mean();var stdevHeights=allHeights.stdev();if(isNaN(meanHeights) || isNaN(stdevHeights))return 0;var localBuildings=[];for(var j=0;j < surrounding.length;j++) {var cell=surrounding[j];if(cell !== null){var key=fp.getIndex(cell.x,cell.y);var building=fp.buildingNetwork.buildingHash[key];if(!_.isUndefined(building)){localBuildings.push(building);}}}if(localBuildings.length > 0){var localHeights=jStat(_.map(localBuildings,function(building){return building.maxHeight;}));var meanLocalHeights=localHeights.mean();return (meanLocalHeights - meanHeights) / stdevHeights;}else return 0;};this.surroundingCells = function(index){var surroundingCells=[];var maxCells=fp.terrain.gridPoints * fp.terrain.gridPoints,positions=fp.terrain.planeArray.array;var indexY=Math.floor(index / fp.terrain.gridPoints),indexX=index % fp.terrain.gridPoints,indexMirroredOnY=(fp.terrain.gridPoints - indexY) * fp.terrain.gridPoints + indexX,inc=fp.appConfig.terrainOptions.multiplier,threshold=fp.appConfig.worldOptions.maxLandSearchDepth * inc;for(var j=inc;j <= threshold;j += inc) {if(Math.floor((indexMirroredOnY - j) / fp.terrain.gridPoints) == Math.floor(indexMirroredOnY / fp.terrain.gridPoints)){surroundingCells.push(new THREE.Vector3(positions[3 * (indexMirroredOnY - j - fp.terrain.gridPoints * j) + 0],positions[3 * (indexMirroredOnY - j - fp.terrain.gridPoints * j) + 1],positions[3 * (indexMirroredOnY - j - fp.terrain.gridPoints * j) + 2]));surroundingCells.push(new THREE.Vector3(positions[3 * (indexMirroredOnY - j) + 0],positions[3 * (indexMirroredOnY - j) + 1],positions[3 * (indexMirroredOnY - j) + 2]));surroundingCells.push(new THREE.Vector3(positions[3 * (indexMirroredOnY - j + fp.terrain.gridPoints * j) + 0],positions[3 * (indexMirroredOnY - j + fp.terrain.gridPoints * j) + 1],positions[3 * (indexMirroredOnY - j + fp.terrain.gridPoints * j) + 2]));}if(Math.floor((indexMirroredOnY + j) / fp.terrain.gridPoints) == Math.floor(indexMirroredOnY / fp.terrain.gridPoints)){surroundingCells.push(new THREE.Vector3(positions[3 * (indexMirroredOnY + j - fp.terrain.gridPoints * j) + 0],positions[3 * (indexMirroredOnY + j - fp.terrain.gridPoints * j) + 1],positions[3 * (indexMirroredOnY + j - fp.terrain.gridPoints * j) + 2]));surroundingCells.push(new THREE.Vector3(positions[3 * (indexMirroredOnY + j) + 0],positions[3 * (indexMirroredOnY + j) + 1],positions[3 * (indexMirroredOnY + j) + 2]));surroundingCells.push(new THREE.Vector3(positions[3 * (indexMirroredOnY + j + fp.terrain.gridPoints * j) + 0],positions[3 * (indexMirroredOnY + j + fp.terrain.gridPoints * j) + 1],positions[3 * (indexMirroredOnY + j + fp.terrain.gridPoints * j) + 2]));}surroundingCells.push(new THREE.Vector3(positions[3 * (indexMirroredOnY - fp.terrain.gridPoints * j) + 0],positions[3 * (indexMirroredOnY - fp.terrain.gridPoints * j) + 1],positions[3 * (indexMirroredOnY - fp.terrain.gridPoints * j) + 2]));surroundingCells.push(new THREE.Vector3(positions[3 * (indexMirroredOnY + fp.terrain.gridPoints * j) + 0],positions[3 * (indexMirroredOnY + fp.terrain.gridPoints * j) + 1],positions[3 * (indexMirroredOnY + fp.terrain.gridPoints * j) + 2]));}return _.compact(surroundingCells);};this.updateKeyboard = function(){if(fp.keyboard.pressed("V")){fp.appConfig.displayOptions.firstPersonView = !fp.appConfig.displayOptions.firstPersonView;fp.resetControls();}if(fp.appConfig.displayOptions.firstPersonView)return;if(fp.keyboard.pressed("S")){fp.appConfig.Setup();}else if(fp.keyboard.pressed("R")){fp.appConfig.Run();}else if(fp.keyboard.pressed("U")){fp.appConfig.SpeedUp();}else if(fp.keyboard.pressed("D")){fp.appConfig.SlowDown();}else if(fp.keyboard.pressed("B")){fp.appConfig.displayOptions.buildingsShow = !fp.appConfig.displayOptions.buildingsShow;fp.toggleBuildingState();}else if(fp.keyboard.pressed("O")){fp.appConfig.displayOptions.roadsShow = !fp.appConfig.displayOptions.roadsShow;fp.toggleRoadState();}else if(fp.keyboard.pressed("M")){fp.appConfig.displayOptions.waterShow = !fp.appConfig.displayOptions.waterShow;fp.toggleWaterState();}else if(fp.keyboard.pressed("N")){fp.appConfig.displayOptions.networkShow = !fp.appConfig.displayOptions.networkShow;fp.toggleAgentNetwork();}else if(fp.keyboard.pressed("P")){fp.appConfig.displayOptions.patchesShow = !fp.appConfig.displayOptions.patchesShow;fp.togglePatchesState();}else if(fp.keyboard.pressed("T")){fp.appConfig.displayOptions.trailsShow = !fp.appConfig.displayOptions.trailsShow;fp.toggleTrailState();}else if(fp.keyboard.pressed("C")){fp.appConfig.displayOptions.cursorShow = !fp.appConfig.displayOptions.cursorShow;fp.removeCursor();}else if(fp.keyboard.pressed("A")){fp.appConfig.displayOptions.statsShow = !fp.appConfig.displayOptions.statsShow;fp.toggleStatsState();}else if(fp.keyboard.pressed("W")){fp.appConfig.displayOptions.wireframeShow = !fp.appConfig.displayOptions.wireframeShow;fp.toggleWireframeState();}else if(fp.keyboard.pressed("Y")){fp.appConfig.displayOptions.dayShow = !fp.appConfig.displayOptions.dayShow;fp.toggleDayNight();}else if(fp.keyboard.pressed("G")){fp.appConfig.displayOptions.chartShow = !fp.appConfig.displayOptions.chartShow;fp.updateGraph();}else if(fp.keyboard.pressed("X")){fp.appConfig.displayOptions.pathsShow = !fp.appConfig.displayOptions.pathsShow;fp.togglePathsState();}else if(fp.keyboard.pressed("E")){fp.appConfig.displayOptions.terrainShow = !fp.appConfig.displayOptions.terrainShow;fp.toggleTerrainPlane();}};this.mouseIntersects = function(eventInfo){fp.mouse.x = eventInfo.clientX / window.innerWidth * 2 - 1;fp.mouse.y = -(eventInfo.clientY / window.innerHeight) * 2 + 1;fp.mouseVector.set(fp.mouse.x,fp.mouse.y,fp.mouse.z);fp.mouseVector.unproject(fp.camera);var direction=fp.mouseVector.sub(fp.camera.position).normalize();fp.ray.set(fp.camera.position,direction);var intersects=fp.ray.intersectObject(fp.terrain.plane);var point;if(intersects.length > 0)point = intersects[0].point;return point;};this.onMouseMove = function(eventInfo){eventInfo.preventDefault();if(!fp.appConfig.displayOptions.cursorShow)return;var planePoint=fp.mouseIntersects(eventInfo);if(fp.appConfig.displayOptions.cursorShowCell)fp.cursor.createCellFill(planePoint.x,planePoint.z);else fp.cursor.createCell(planePoint.x,planePoint.z);if(eventInfo.which == 1)fp.terrain.flattenTerrain();};this.onMouseUp = function(eventInfo){eventInfo.preventDefault();if(!eventInfo.metaKey)return;var planePoint=this.mouseIntersects(eventInfo),p1,p2;if(!_.isUndefined(planePoint)){if(_.isUndefined(p1))p1 = planePoint;else if(_.isUndefined(p2)){p2 = planePoint;fp.roadNetwork.addRoad(p1,p2,appConfig.roadOptions.roadWidth);p1 = p2 = undefined;}}};this.toggleAgentState = function(){if(!fp.appConfig.displayOptions.agentsShow)fp.scene.remove(fp.agentNetwork.particles);else fp.scene.add(fp.agentNetwork.particles);};this.toggleBuildingState = function(){if(!fp.appConfig.displayOptions.buildingsShow)fp.scene.remove(fp.buildingNetwork.networkMesh);else fp.scene.add(fp.buildingNetwork.networkMesh);};this.toggleRoadState = function(){if(!fp.appConfig.displayOptions.roadsShow)fp.scene.remove(fp.roadNetwork.networkMesh);else if(!_.isUndefined(fp.roadNetwork.networkMesh))fp.scene.add(fp.roadNetwork.networkMesh);};this.toggleWaterState = function(){if(!fp.appConfig.displayOptions.waterShow)fp.scene.remove(fp.waterMesh);else fp.scene.add(fp.waterMesh);};this.toggleAgentNetwork = function(){if(!fp.appConfig.displayOptions.networkShow){fp.agentNetwork.networks.forEach(function(network){fp.scene.remove(network.networkMesh);});}else {fp.agentNetwork.networks.forEach(function(network){if(!_.isNull(network.networkMesh))fp.scene.add(network.networkMesh);});}};this.togglePatchesState = function(){fp.patchNetwork.togglePatchesState();};this.toggleTrailState = function(){if(!fp.appConfig.displayOptions.trailsShow || !fp.appConfig.displayOptions.trailsShowAsLines){fp.scene.remove(fp.trailNetwork.globalTrailLine);}else if(appConfig.displayOptions.trailsShowAsLines){fp.scene.add(fp.trailNetwork.globalTrailLine);}};this.togglePathsState = function(){if(!fp.appConfig.displayOptions.pathsShow)fp.scene.remove(fp.pathNetwork.networkMesh);else fp.scene.add(fp.pathNetwork.networkMesh);};this.toggleTerrainPlane = function(){if(!fp.appConfig.displayOptions.terrainShow)fp.scene.remove(fp.terrain.plane);else fp.scene.add(fp.terrain.plane);};this.toggleLights = function(){if(!fp.appConfig.displayOptions.lightHemisphereShow)fp.scene.remove(fp.lightHemisphere);else fp.scene.add(fp.lightHemisphere);if(!fp.appConfig.displayOptions.lightDirectionalShow)fp.scene.remove(fp.lightDirectional);else fp.scene.add(fp.lightDirectional);};this.removeCursor = function(){fp.scene.remove(fp.cursor.cell);fp.cursor.cell = undefined;};this.toggleStatsState = function(){if(fp.appConfig.displayOptions.statsShow && fp.stats === null){fp.stats = new Stats();fp.stats.domElement.style.position = "absolute";fp.stats.domElement.style.top = "0px";fp.container.appendChild(fp.stats.domElement);}$("#stats").toggle(fp.appConfig.displayOptions.statsShow);};this.toggleHUDState = function(){$("#hudDiv").toggle(fp.appConfig.displayOptions.hudShow);};this.toggleWireframeState = function(){fp.terrain.simpleTerrainMaterial.wireframe = fp.appConfig.displayOptions.wireframeShow;fp.terrain.richTerrainMaterial.wireframe = fp.appConfig.displayOptions.wireframeShow;fp.buildingNetwork.buildings.forEach(function(building){building.highResMeshContainer.children.forEach(function(mesh){mesh.material.wireframe = fp.appConfig.displayOptions.wireframeShow;});});};this.toggleDayNight = function(){var colorBackground,colorBuilding,colorRoad,colorAgent,colorNetwork,colorTrail,colorBuildingFill,colorBuildingLine,colorBuildingWindow;if(fp.appConfig.displayOptions.dayShow){colorBackground = fp.appConfig.colorOptions.colorDayBackground;colorRoad = fp.appConfig.colorOptions.colorDayRoad;colorAgent = fp.appConfig.colorOptions.colorDayAgent;colorNetwork = fp.appConfig.colorOptions.colorDayNetwork;colorTrail = fp.appConfig.colorOptions.colorDayTrail;colorBuildingFill = fp.appConfig.colorOptions.colorDayBuildingFill;colorBuildingLine = fp.appConfig.colorOptions.colorDayBuildingLine;colorBuildingWindow = fp.appConfig.colorOptions.colorDayBuildingWindow;fp.terrain.richTerrainMaterial.uniforms = fp.ShaderUtils.lambertUniforms(fp.terrain.dayTerrainUniforms);fp.terrain.simpleTerrainMaterial.color = new THREE.Color(fp.appConfig.colorOptions.colorDayTerrainLowland1);if(fp.appConfig.displayOptions.skyboxShow)fp.scene.add(fp.skyBox);}else {colorBackground = fp.appConfig.colorOptions.colorNightBackground;colorRoad = fp.appConfig.colorOptions.colorNightRoad;colorAgent = fp.appConfig.colorOptions.colorNightAgent;colorNetwork = fp.appConfig.colorOptions.colorNightNetwork;colorTrail = fp.appConfig.colorOptions.colorNightTrail;colorBuildingFill = fp.appConfig.colorOptions.colorNightBuildingFill;colorBuildingLine = fp.appConfig.colorOptions.colorNightBuildingLine;colorBuildingWindow = fp.appConfig.colorOptions.colorNightBuildingWindow;fp.terrain.richTerrainMaterial.uniforms = fp.ShaderUtils.lambertUniforms(fp.terrain.nightTerrainUniforms);fp.terrain.simpleTerrainMaterial.color = new THREE.Color(fp.appConfig.colorOptions.colorNightTerrainLowland1);fp.scene.remove(fp.skyBox);}fp.terrain.richTerrainMaterial.needsUpdate = true;fp.terrain.simpleTerrainMaterial.needsUpdate = true;fp.terrain.plane.material.needsUpdate = true;fp.renderer.setClearColor(colorBackground,1);if(fp.appConfig.buildingOptions.useShader){fp.buildingNetwork.buildings.forEach(function(building){building.highResMeshContainer.children.forEach(function(floor){floor.material.uniforms.fillColor.value = fp.buildColorVector(colorBuildingFill);floor.material.uniforms.lineColor.value = fp.buildColorVector(colorBuildingLine);floor.material.uniforms.windowColor.value = fp.buildColorVector(colorBuildingWindow);floor.material.needsUpdate = true;});});}if(!_.isNull(fp.roadNetwork.networkMesh)){fp.roadNetwork.networkMesh.children.forEach(function(road){road.material.color = new THREE.Color(colorRoad);road.material.colorsNeedUpdate = true;});}fp.agentNetwork.networks.forEach(function(network){if(!_.isNull(network.networkMesh)){network.networkMesh.material.color = new THREE.Color(colorNetwork);network.networkMesh.material.colorsNeedUpdate = true;}});if(!_.isNull(fp.trailNetwork.globalTrailLine)){fp.trailNetwork.globalTrailLine.material.color = new THREE.Color(colorTrail);fp.trailNetwork.globalTrailLine.material.colorsNeedUpdate = true;}if(!_.isNull(fp.agentNetwork.particles))fp.agentNetwork.agents.forEach(function(agent){agent.color = colorAgent;});};this.loadTerrain = function(callback){var terrainLoader=new THREE.TerrainLoader();terrainLoader.load(fp.TERRAIN_MAPS[fp.terrain.terrainMapIndex],function(data){fp.terrain.initTerrain(data);fp.animate();if(_.isFunction(callback))callback();});};this.ShaderUtils = {buildingVertexShaderParams:function buildingVertexShaderParams(){var shader="\n                        varying vec3 pos;\n                        varying float vMixin;\n                        attribute float mixin;\n                        uniform float time;\n                    ";return shader;},buildingVertexShaderMain:function buildingVertexShaderMain(){var shader="\n                        pos = position;\n                        vMixin = mixin;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                    ";return shader;},buildingFragmentShaderParams:function buildingFragmentShaderParams(){var shader="\n                        uniform float time;\n                        uniform vec2 location;\n                        uniform vec2 resolution;\n                        uniform vec3 dimensions;\n                        uniform float bottomWindow;\n                        uniform float topWindow;\n                        uniform float windowWidth;\n                        uniform float windowPercent;\n                        uniform float floorLevel;\n                        uniform float lineWidth;\n                        uniform int showLines;\n                        uniform int showFill;\n                        uniform int showWindows;\n                        uniform int fillRooves;\n                        uniform vec3 lineColor;\n                        uniform vec3 fillColor;\n                        uniform vec3 windowColor;\n                        varying vec3 pos;\n                        varying float vMixin;\n\n                        // Basic random generator, taken from http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n                        // and http://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\n                        // For something more sophisticated try github.com/ashima/webgl-noise\n                        float rand( vec2 co ) {\n                            return fract( sin( dot( co.xy ,vec2( 12.9898,78.233 )) ) * 43758.5453 );\n                        }\n                    ";return shader;},buildingFragmentShaderMain:function buildingFragmentShaderMain(){var shader="\n                        vec3 darkGrey = vec3( 0.1,0.1,0.1 );\n                        vec4 col = vec4( darkGrey, 1. );\n                        float opacity = 1.;\n                        if ( showFill == 1 ) {\n                            col = vec4( mix( fillColor, darkGrey, rand( location ) ), opacity );\n                        }\n                        bool colorise = false;\n                        float dimX = dimensions.x;\n                        float dimY = dimensions.y;\n                        float dimZ = dimensions.z;\n                        float posX = pos.x;\n                        float posY = mod( pos.z, dimY );\n                        float levels = floor( pos.z / dimY );\n                        float posZ = pos.y;\n\n                        // Paint windows\n                        if ( showWindows == 1 ) {\n                            // Normalise height\n                            float height = 1.0 - posY / dimY;\n                            if ( height > bottomWindow && height < topWindow ) {\n                                float p = 0.;\n                                if ( posX < ( floor( dimX / 2.0 ) - 1.0 ) && posX > -( floor( dimX / 2.0 ) - 1.0 )) {\n                                    float width = ( posX + dimX / 2.0 );\n                                    float m = mod( width, windowWidth );\n                                    p = abs( floor( width / windowWidth ) );\n                                    float offsetL = windowWidth * ( (1.0 - windowPercent ) / 2.0 );\n                                    float offsetR = windowWidth - offsetL;\n                                    if ( m > offsetL && m < offsetR )\n                                        colorise = true;\n                                }\n                                if ( posZ < ( floor( dimZ / 2.0 ) - 1.0 ) && posZ > -( floor( dimZ / 2.0 ) - 1.0 )) {\n                                    float width = ( posZ + dimZ / 2.0 );\n                                    float m = mod( width, windowWidth );\n                                    p = abs( floor( width / windowWidth ) );\n                                    float offsetL = windowWidth * ( (1.0 - windowPercent ) / 2.0 );\n                                    float offsetR = windowWidth - offsetL;\n                                    if ( m > offsetL && m < offsetR )\n                                        colorise = true;\n                                }\n                                if ( colorise ) {\n                                    col = vec4( mix( darkGrey, windowColor, pow( rand( vec2( p, levels ) ), vMixin ) ), opacity );\n                                }\n                            }\n                        }\n                        if ( showLines == 1 ) {\n                            // Rules for horizontal lines\n                            // IGNORE BOTTOM LINE FOR NOW:  || posY > dimY - lineWidth\n                            if ( posY == 0.0 && fillRooves == 1 )  {\n                                col = vec4( mix( windowColor, darkGrey, 0.5 ), opacity );\n                            }\n                            else if ( posY < lineWidth ) {\n                                // This gives just lines\n                                if ( posZ < - ( dimZ / 2.0 ) + lineWidth || posZ > ( dimZ / 2.0 ) - lineWidth )\n                                    col = vec4( lineColor, opacity );\n                                if ( posX < - ( dimX / 2.0 ) + lineWidth || posX > ( dimX / 2.0 ) - lineWidth )\n                                    col = vec4( lineColor, opacity );\n                            }\n                            else {\n                                // Rules for vertical lines\n                                if ( posZ < - ( dimZ / 2.0 ) + lineWidth )\n                                    if ( posX < - ( dimX / 2.0 ) + lineWidth || posX > ( dimX / 2.0 ) - lineWidth )\n                                        col = vec4( lineColor, opacity );\n                                if ( posZ > ( dimZ / 2.0 ) - lineWidth )\n                                    if ( posX < - ( dimX / 2.0 ) + lineWidth || posX > ( dimX / 2.0 ) - lineWidth )\n                                        col = vec4( lineColor, opacity );\n                            }\n                        }\n                        outgoingLight = vec3( col.r, col.g, col.b );\n                        diffuseColor = vec4( col.r, col.g, col.b, col.a );\n                    ";return shader;},terrainVertexShaderParams:function terrainVertexShaderParams(){var shader="\n                    uniform float size;\n                    uniform float maxHeight;\n                    attribute float height;\n                    attribute float trail;\n                    attribute float patch;\n                    varying float vHeight;\n                    varying float vTrail;\n                    varying float vPatch;\n                    ";return shader;},terrainVertexShaderMain:function terrainVertexShaderMain(){var shader="\n                        vHeight = height;\n                        vTrail = trail;\n                        vPatch = patch;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4( position,1.0 );\n                    ";return shader;},terrainFragmentShaderParams:function terrainFragmentShaderParams(){var shader="\n                        uniform float size;\n                        uniform float maxHeight;\n                        varying float vHeight;\n                        varying float vTrail;\n                        varying float vPatch;\n                        // Terrain colors\n                        uniform vec3 groundLevelColor;\n                        uniform vec3 lowland1Color;\n                        uniform vec3 lowland2Color;\n                        uniform vec3 midland1Color;\n                        uniform vec3 midland2Color;\n                        uniform vec3 highlandColor;\n                        uniform float stop1;\n                        uniform float stop2;\n                        uniform float stop3;\n                        uniform float stop4;\n                        uniform float stop5;\n                    ";return shader;},terrainFragmentShaderMain:function terrainFragmentShaderMain(){var shader="\n                    vec4 groundLevel = vec4( groundLevelColor, opacity );\n                    vec4 lowland1 = vec4( lowland1Color, opacity );\n                    vec4 lowland2 = vec4( lowland2Color, opacity );\n                    vec4 midland1 = vec4( midland1Color, opacity );\n                    vec4 midland2 = vec4( midland2Color, opacity );\n                    vec4 highland = vec4( highlandColor, opacity );\n                    float range;\n                    vec4 col;\n\n                    float elevation = vHeight / maxHeight;\n                    if ( vPatch > 0.0 ) {\n                        if ( elevation <=  0.0 ) {\n                            col = vec4( 0.0, 0.0, 0.0, 0.0 );\n                        }\n                        else {\n                            col = vec4( vPatch, vPatch, vPatch, 1.0 );\n                        }\n                    }\n                    else if ( vTrail > 0.0 ) {\n                        col = vec4( vTrail, vTrail, vTrail, 1.0 );\n                    }\n                    else {\n                        if ( elevation == 0.0 ) {\n                            col = vec4( 0.0, 0.0, 0.0, 0.0 );\n                        }\n                        else if ( elevation < stop1 ) {\n                            range = ( elevation - 0.0 ) * ( 1.0 / stop1 );\n                            col = mix( groundLevel, lowland1, range );\n                        }\n                        else if ( elevation < stop2 ) {\n                            range = ( elevation - stop1 ) * ( 1.0 / ( stop2 - stop1 ) );\n                            col = mix( lowland1, lowland2, range );\n                        }\n                        else if ( elevation < stop3 ) {\n                            range = ( elevation - stop2 ) * ( 1.0 / ( stop3 - stop2 ) );\n                            col = mix( lowland2, midland1, range );\n                        }\n                        else if ( elevation < stop4 ) {\n                            range = ( elevation - stop3 ) * ( 1.0 / ( stop4 - stop3 ) );\n                            col = mix( midland1, midland2, range );\n                        }\n                        else if ( elevation < stop5 ) {\n                            range = ( elevation - stop4 ) * ( 1.0 / ( stop5 - stop4 ) );\n                            col = mix( midland2, highland, range );\n                        }\n                        else  {\n                            col = highland;\n                        }\n                    }\n                    outgoingLight = vec3( col.r, col.g, col.b );\n                    diffuseColor = vec4( col.r, col.g, col.b, col.a );\n                    ";return shader;},agentVertexShader:function agentVertexShader(){var shader="\n                    uniform float size;\n                    attribute float alpha;\n                    attribute vec3 color;\n                    varying float vAlpha;\n                    varying vec3 vColor;\n\n                    void main() {\n                        vAlpha = alpha;\n                        vColor = color; // set RGB color associated to vertex; use later in fragment shader.\n                        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n                        // option ( 1 ): draw particles at constant size on screen\n                        // gl_PointSize = size;\n                        // option ( 2 ): scale particles as objects in 3D space\n                        gl_PointSize = 1.0 * size * ( 300.0 / length( mvPosition.xyz ) );\n                        gl_Position = projectionMatrix * mvPosition;\n                    }\n                    ";return shader;},agentFragmentShader:function agentFragmentShader(){var shader="\n                    varying vec3 vColor;\n                    uniform sampler2D texture;\n                    varying float vAlpha;\n\n                    void main() {\n                        gl_FragColor = vec4( vColor, vAlpha );\n                        // sets a white particle texture to desired color\n                        gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );\n                    }\n                    ";return shader;},lambertShaderVertex:function lambertShaderVertex(customParams,customCode){var vertexShader=[customParams,"\n                        #define LAMBERT\n\n                        varying vec3 vLightFront;\n\n                        #ifdef DOUBLE_SIDED\n\n                           varying vec3 vLightBack;\n\n                        #endif\n                    ",THREE.ShaderChunk["common"],THREE.ShaderChunk["map_pars_vertex"],THREE.ShaderChunk["lightmap_pars_vertex"],THREE.ShaderChunk["envmap_pars_vertex"],THREE.ShaderChunk["lights_lambert_pars_vertex"],THREE.ShaderChunk["color_pars_vertex"],THREE.ShaderChunk["morphtarget_pars_vertex"],THREE.ShaderChunk["skinning_pars_vertex"],THREE.ShaderChunk["shadowmap_pars_vertex"],THREE.ShaderChunk["logdepthbuf_pars_vertex"],"void main() {",customCode,THREE.ShaderChunk["map_vertex"],THREE.ShaderChunk["lightmap_vertex"],THREE.ShaderChunk["color_vertex"],THREE.ShaderChunk["morphnormal_vertex"],THREE.ShaderChunk["skinbase_vertex"],THREE.ShaderChunk["skinnormal_vertex"],THREE.ShaderChunk["defaultnormal_vertex"],THREE.ShaderChunk["morphtarget_vertex"],THREE.ShaderChunk["skinning_vertex"],THREE.ShaderChunk["default_vertex"],THREE.ShaderChunk["logdepthbuf_vertex"],THREE.ShaderChunk["worldpos_vertex"],THREE.ShaderChunk["envmap_vertex"],THREE.ShaderChunk["lights_lambert_vertex"],THREE.ShaderChunk["shadowmap_vertex"],"}"].join("\n");return vertexShader;},lambertShaderFragment:function lambertShaderFragment(customParams,customCode){var fragmentShader=[customParams,"\n                    uniform vec3 diffuse;\n                    uniform vec3 emissive;\n                    uniform float opacity;\n\n                    varying vec3 vLightFront;\n\n                    #ifdef DOUBLE_SIDED\n\n                       varying vec3 vLightBack;\n\n                    #endif\n                    ",THREE.ShaderChunk["common"],THREE.ShaderChunk["color_pars_fragment"],THREE.ShaderChunk["map_pars_fragment"],THREE.ShaderChunk["alphamap_pars_fragment"],THREE.ShaderChunk["lightmap_pars_fragment"],THREE.ShaderChunk["envmap_pars_fragment"],THREE.ShaderChunk["fog_pars_fragment"],THREE.ShaderChunk["shadowmap_pars_fragment"],THREE.ShaderChunk["specularmap_pars_fragment"],THREE.ShaderChunk["logdepthbuf_pars_fragment"],"\n                    void main() {\n\n                       vec3 outgoingLight = vec3( 0.0 ); // outgoing light does not have an alpha, the surface does\n                       vec4 diffuseColor = vec4( diffuse, opacity );\n                    ",customCode,THREE.ShaderChunk["logdepthbuf_fragment"],THREE.ShaderChunk["map_fragment"],THREE.ShaderChunk["color_fragment"],THREE.ShaderChunk["alphamap_fragment"],THREE.ShaderChunk["alphatest_fragment"],THREE.ShaderChunk["specularmap_fragment"],"\n                    #ifdef DOUBLE_SIDED\n\n                        //float isFront = float( gl_FrontFacing );\n                        //gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;\n\n                       if ( gl_FrontFacing )\n                           outgoingLight += diffuseColor.rgb * vLightFront + emissive;\n                       else\n                           outgoingLight += diffuseColor.rgb * vLightBack + emissive;\n\n                    #else\n\n                       outgoingLight += diffuseColor.rgb * vLightFront + emissive;\n\n                    #endif\n                    ",THREE.ShaderChunk["lightmap_fragment"],THREE.ShaderChunk["envmap_fragment"],THREE.ShaderChunk["shadowmap_fragment"],THREE.ShaderChunk["linear_to_gamma_fragment"],THREE.ShaderChunk["fog_fragment"],"\n                        gl_FragColor = vec4( outgoingLight, diffuseColor.a ); // TODO, this should be pre-multiplied to allow for bright highlights on very transparent objects\n                        //gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 ); // TODO, this should be pre-multiplied to allow for bright highlights on very transparent objects\n                    }\n                    "].join("\n");return fragmentShader;},lambertUniforms:function lambertUniforms(otherUniforms){var uniforms=THREE.UniformsUtils.merge([THREE.UniformsLib["common"],THREE.UniformsLib["fog"],THREE.UniformsLib["lights"],THREE.UniformsLib["shadowmap"],{"emissive":{type:"c",value:new THREE.Color(0x000000)},"wrapRGB":{type:"v3",value:new THREE.Vector3(1,1,1)}}]);return _.extend(uniforms,otherUniforms);},allShaders:function allShaders(){return [fp.ShaderUtils.lambertShaderVertex(fp.ShaderUtils.buildingVertexShaderParams(),fp.ShaderUtils.buildingVertexShaderMain()),fp.ShaderUtils.lambertShaderFragment(fp.ShaderUtils.buildingFragmentShaderParams(),fp.ShaderUtils.buildingFragmentShaderMain()),fp.ShaderUtils.lambertShaderVertex(fp.ShaderUtils.terrainVertexShaderParams(),fp.ShaderUtils.terrainVertexShaderMain()),fp.ShaderUtils.lambertShaderFragment(fp.ShaderUtils.terrainFragmentShaderParams(),fp.ShaderUtils.terrainFragmentShaderMain()),fp.ShaderUtils.agentVertexShader(),fp.ShaderUtils.agentFragmentShader()].join("\n");}};};var fp=new FiercePlanet();if(typeof window !== "undefined"){window.FiercePlanet = FiercePlanet;window.fp = new FiercePlanet();}return fp;});
